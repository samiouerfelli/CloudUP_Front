{"ast":null,"code":"import { __awaiter } from 'tslib';\nimport { InjectionToken, EventEmitter, Component, Optional, Inject, ViewChildren, Input, Output, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nconst CodeInputComponentConfigToken = new InjectionToken('CodeInputComponentConfig');\nconst defaultComponentConfig = {\n  codeLength: 4,\n  inputType: 'tel',\n  initialFocusField: undefined,\n  isCharsCode: false,\n  isCodeHidden: false,\n  isPrevFocusableAfterClearing: true,\n  isFocusingOnLastByClickIfFilled: false,\n  code: undefined,\n  disabled: false,\n  autocapitalize: undefined\n};\nvar InputState;\n(function (InputState) {\n  InputState[InputState[\"ready\"] = 0] = \"ready\";\n  InputState[InputState[\"reset\"] = 1] = \"reset\";\n})(InputState || (InputState = {}));\nclass CodeInputComponent {\n  constructor(config) {\n    /** @deprecated Use isCharsCode prop instead. */\n    this.isNonDigitsCode = false;\n    this.codeChanged = new EventEmitter();\n    this.codeCompleted = new EventEmitter();\n    this.placeholders = [];\n    this.inputs = [];\n    this.inputsStates = [];\n    this.state = {\n      isFocusingAfterAppearingCompleted: false,\n      isInitialFocusFieldEnabled: false\n    };\n    Object.assign(this, defaultComponentConfig);\n    if (!config) {\n      return;\n    }\n    // filtering for only valid config props\n    for (const prop in config) {\n      if (!config.hasOwnProperty(prop)) {\n        continue;\n      }\n      if (!defaultComponentConfig.hasOwnProperty(prop)) {\n        continue;\n      }\n      // @ts-ignore\n      this[prop] = config[prop];\n    }\n  }\n  /**\r\n   * Life cycle\r\n   */\n  ngOnInit() {\n    // defining the state\n    this.state.isInitialFocusFieldEnabled = !this.isEmpty(this.initialFocusField);\n    // initiating the code\n    this.onCodeLengthChanges();\n  }\n  ngAfterViewInit() {\n    // initiation of the inputs\n    this.inputsListSubscription = this.inputsList.changes.subscribe(this.onInputsListChanges.bind(this));\n    this.onInputsListChanges(this.inputsList);\n  }\n  ngAfterViewChecked() {\n    this.focusOnInputAfterAppearing();\n  }\n  ngOnChanges(changes) {\n    if (changes.code) {\n      this.onInputCodeChanges();\n    }\n    if (changes.codeLength) {\n      this.onCodeLengthChanges();\n    }\n  }\n  ngOnDestroy() {\n    if (this.inputsListSubscription) {\n      this.inputsListSubscription.unsubscribe();\n    }\n  }\n  /**\r\n   * Methods\r\n   */\n  reset(isChangesEmitting = false) {\n    // resetting the code to its initial value or to an empty value\n    this.onInputCodeChanges();\n    if (this.state.isInitialFocusFieldEnabled) {\n      // tslint:disable-next-line:no-non-null-assertion\n      this.focusOnField(this.initialFocusField);\n    }\n    if (isChangesEmitting) {\n      this.emitChanges();\n    }\n  }\n  focusOnField(index) {\n    if (index >= this._codeLength) {\n      throw new Error('The index of the focusing input box should be less than the codeLength.');\n    }\n    this.inputs[index].focus();\n  }\n  onClick(e) {\n    // handle click events only if the the prop is enabled\n    if (!this.isFocusingOnLastByClickIfFilled) {\n      return;\n    }\n    const target = e.target;\n    const last = this.inputs[this._codeLength - 1];\n    // already focused\n    if (target === last) {\n      return;\n    }\n    // check filling\n    const isFilled = this.getCurrentFilledCode().length >= this._codeLength;\n    if (!isFilled) {\n      return;\n    }\n    // focusing on the last input if is filled\n    setTimeout(() => last.focus());\n  }\n  onInput(e, i) {\n    const target = e.target;\n    const value = e.data || target.value;\n    if (this.isEmpty(value)) {\n      return;\n    }\n    // only digits are allowed if isCharsCode flag is absent/false\n    if (!this.canInputValue(value)) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.setInputValue(target, null);\n      this.setStateForInput(target, InputState.reset);\n      return;\n    }\n    const values = value.toString().trim().split('');\n    for (let j = 0; j < values.length; j++) {\n      const index = j + i;\n      if (index > this._codeLength - 1) {\n        break;\n      }\n      this.setInputValue(this.inputs[index], values[j]);\n    }\n    this.emitChanges();\n    const next = i + values.length;\n    if (next > this._codeLength - 1) {\n      target.blur();\n      return;\n    }\n    this.inputs[next].focus();\n  }\n  onPaste(e, i) {\n    e.preventDefault();\n    e.stopPropagation();\n    const data = e.clipboardData ? e.clipboardData.getData('text').trim() : undefined;\n    if (this.isEmpty(data)) {\n      return;\n    }\n    // Convert paste text into iterable\n    // tslint:disable-next-line:no-non-null-assertion\n    const values = data.split('');\n    let valIndex = 0;\n    for (let j = i; j < this.inputs.length; j++) {\n      // The values end is reached. Loop exit\n      if (valIndex === values.length) {\n        break;\n      }\n      const input = this.inputs[j];\n      const val = values[valIndex];\n      // Cancel the loop when a value cannot be used\n      if (!this.canInputValue(val)) {\n        this.setInputValue(input, null);\n        this.setStateForInput(input, InputState.reset);\n        return;\n      }\n      this.setInputValue(input, val.toString());\n      valIndex++;\n    }\n    this.inputs[i].blur();\n    this.emitChanges();\n  }\n  onKeydown(e, i) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const target = e.target;\n      const isTargetEmpty = this.isEmpty(target.value);\n      const prev = i - 1;\n      // processing only the backspace and delete key events\n      const isBackspaceKey = yield this.isBackspaceKey(e);\n      const isDeleteKey = this.isDeleteKey(e);\n      if (!isBackspaceKey && !isDeleteKey) {\n        return;\n      }\n      e.preventDefault();\n      this.setInputValue(target, null);\n      if (!isTargetEmpty) {\n        this.emitChanges();\n      }\n      // preventing to focusing on the previous field if it does not exist or the delete key has been pressed\n      if (prev < 0 || isDeleteKey) {\n        return;\n      }\n      if (isTargetEmpty || this.isPrevFocusableAfterClearing) {\n        this.inputs[prev].focus();\n      }\n    });\n  }\n  onInputCodeChanges() {\n    if (!this.inputs.length) {\n      return;\n    }\n    if (this.isEmpty(this.code)) {\n      this.inputs.forEach(input => {\n        this.setInputValue(input, null);\n      });\n      return;\n    }\n    // tslint:disable-next-line:no-non-null-assertion\n    const chars = this.code.toString().trim().split('');\n    // checking if all the values are correct\n    let isAllCharsAreAllowed = true;\n    for (const char of chars) {\n      if (!this.canInputValue(char)) {\n        isAllCharsAreAllowed = false;\n        break;\n      }\n    }\n    this.inputs.forEach((input, index) => {\n      const value = isAllCharsAreAllowed ? chars[index] : null;\n      this.setInputValue(input, value);\n    });\n  }\n  onCodeLengthChanges() {\n    if (!this.codeLength) {\n      return;\n    }\n    this._codeLength = this.codeLength;\n    if (this._codeLength > this.placeholders.length) {\n      const numbers = Array(this._codeLength - this.placeholders.length).fill(1);\n      this.placeholders.splice(this.placeholders.length - 1, 0, ...numbers);\n    } else if (this._codeLength < this.placeholders.length) {\n      this.placeholders.splice(this._codeLength);\n    }\n  }\n  onInputsListChanges(list) {\n    if (list.length > this.inputs.length) {\n      const inputsToAdd = list.filter((item, index) => index > this.inputs.length - 1);\n      this.inputs.splice(this.inputs.length, 0, ...inputsToAdd.map(item => item.nativeElement));\n      const states = Array(inputsToAdd.length).fill(InputState.ready);\n      this.inputsStates.splice(this.inputsStates.length, 0, ...states);\n    } else if (list.length < this.inputs.length) {\n      this.inputs.splice(list.length);\n      this.inputsStates.splice(list.length);\n    }\n    // filling the inputs after changing of their count\n    this.onInputCodeChanges();\n  }\n  focusOnInputAfterAppearing() {\n    if (!this.state.isInitialFocusFieldEnabled) {\n      return;\n    }\n    if (this.state.isFocusingAfterAppearingCompleted) {\n      return;\n    }\n    // tslint:disable-next-line:no-non-null-assertion\n    this.focusOnField(this.initialFocusField);\n    // tslint:disable-next-line:no-non-null-assertion\n    this.state.isFocusingAfterAppearingCompleted = document.activeElement === this.inputs[this.initialFocusField];\n  }\n  emitChanges() {\n    setTimeout(() => this.emitCode(), 50);\n  }\n  emitCode() {\n    const code = this.getCurrentFilledCode();\n    this.codeChanged.emit(code);\n    if (code.length >= this._codeLength) {\n      this.codeCompleted.emit(code);\n    }\n  }\n  getCurrentFilledCode() {\n    let code = '';\n    for (const input of this.inputs) {\n      if (!this.isEmpty(input.value)) {\n        code += input.value;\n      }\n    }\n    return code;\n  }\n  isBackspaceKey(e) {\n    const isBackspace = e.key && e.key.toLowerCase() === 'backspace' || e.keyCode && e.keyCode === 8;\n    if (isBackspace) {\n      return Promise.resolve(true);\n    }\n    // process only key with placeholder keycode on android devices\n    if (!e.keyCode || e.keyCode !== 229) {\n      return Promise.resolve(false);\n    }\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const input = e.target;\n        const isReset = this.getStateForInput(input) === InputState.reset;\n        if (isReset) {\n          this.setStateForInput(input, InputState.ready);\n        }\n        // if backspace key pressed the caret will have position 0 (for single value field)\n        resolve(input.selectionStart === 0 && !isReset);\n      });\n    });\n  }\n  isDeleteKey(e) {\n    return e.key && e.key.toLowerCase() === 'delete' || e.keyCode && e.keyCode === 46;\n  }\n  setInputValue(input, value) {\n    const isEmpty = this.isEmpty(value);\n    const valueClassCSS = 'has-value';\n    const emptyClassCSS = 'empty';\n    if (isEmpty) {\n      input.value = '';\n      input.classList.remove(valueClassCSS);\n      // tslint:disable-next-line:no-non-null-assertion\n      input.parentElement.classList.add(emptyClassCSS);\n    } else {\n      input.value = value;\n      input.classList.add(valueClassCSS);\n      // tslint:disable-next-line:no-non-null-assertion\n      input.parentElement.classList.remove(emptyClassCSS);\n    }\n  }\n  canInputValue(value) {\n    if (this.isEmpty(value)) {\n      return false;\n    }\n    const isDigitsValue = /^[0-9]+$/.test(value.toString());\n    return isDigitsValue || this.isCharsCode || this.isNonDigitsCode;\n  }\n  setStateForInput(input, state) {\n    const index = this.inputs.indexOf(input);\n    if (index < 0) {\n      return;\n    }\n    this.inputsStates[index] = state;\n  }\n  getStateForInput(input) {\n    const index = this.inputs.indexOf(input);\n    return this.inputsStates[index];\n  }\n  isEmpty(value) {\n    return value === null || value === undefined || !value.toString().length;\n  }\n}\n/** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\nCodeInputComponent.decorators = [{\n  type: Component,\n  args: [{\n    // tslint:disable-next-line:component-selector\n    selector: 'code-input',\n    template: \"<span *ngFor=\\\"let holder of placeholders; index as i\\\"\\n      [class.code-hidden]=\\\"isCodeHidden\\\">\\n  <input #input\\n         (click)=\\\"onClick($event)\\\"\\n         (paste)=\\\"onPaste($event, i)\\\"\\n         (input)=\\\"onInput($event, i)\\\"\\n         (keydown)=\\\"onKeydown($event, i)\\\"\\n         [type]=\\\"inputType\\\"\\n         [disabled]=\\\"disabled\\\"\\n         [attr.autocapitalize]=\\\"autocapitalize\\\"\\n         autocomplete=\\\"one-time-code\\\"/>\\n</span>\\n\",\n    styles: [\":host{--text-security-type:disc;--item-spacing:4px;--item-height:4.375em;--item-border:1px solid #ddd;--item-border-bottom:1px solid #ddd;--item-border-has-value:1px solid #ddd;--item-border-bottom-has-value:1px solid #ddd;--item-border-focused:1px solid #ddd;--item-border-bottom-focused:1px solid #ddd;--item-shadow-focused:0px 1px 5px #ddd;--item-border-radius:5px;--item-background:transparent;--color:#171516;display:flex;transform:translateZ(0);font-size:inherit;color:var(--color)}:host span{display:block;flex:1;padding-right:var(--item-spacing)}:host span:first-child{padding-left:var(--item-spacing)}:host span.code-hidden input{text-security:var(--text-security-type);-webkit-text-security:var(--text-security-type);-moz-text-security:var(--text-security-type)}:host input{width:100%;height:var(--item-height);color:inherit;background:var(--item-background);text-align:center;font-size:inherit;border:var(--item-border);border-bottom:var(--item-border-bottom);border-radius:var(--item-border-radius);-webkit-appearance:none;transform:translateZ(0);-webkit-transform:translateZ(0);outline:none}:host input.has-value{border:var(--item-border-has-value);border-bottom:var(--item-border-bottom-has-value)}:host input:focus{border:var(--item-border-focused);border-bottom:var(--item-border-bottom-focused);box-shadow:var(--item-shadow-focused)}\"]\n  }]\n}];\n/**\r\n * @type {function(): !Array<(null|{\r\n *   type: ?,\r\n *   decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>),\r\n * })>}\r\n * @nocollapse\r\n */\nCodeInputComponent.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [CodeInputComponentConfigToken]\n  }]\n}];\n/** @type {!Object<string, !Array<{type: !Function, args: (undefined|!Array<?>)}>>} */\nCodeInputComponent.propDecorators = {\n  inputsList: [{\n    type: ViewChildren,\n    args: ['input']\n  }],\n  codeLength: [{\n    type: Input\n  }],\n  inputType: [{\n    type: Input\n  }],\n  initialFocusField: [{\n    type: Input\n  }],\n  isNonDigitsCode: [{\n    type: Input\n  }],\n  isCharsCode: [{\n    type: Input\n  }],\n  isCodeHidden: [{\n    type: Input\n  }],\n  isPrevFocusableAfterClearing: [{\n    type: Input\n  }],\n  isFocusingOnLastByClickIfFilled: [{\n    type: Input\n  }],\n  code: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  autocapitalize: [{\n    type: Input\n  }],\n  codeChanged: [{\n    type: Output\n  }],\n  codeCompleted: [{\n    type: Output\n  }]\n};\nclass CodeInputModule {\n  static forRoot(config) {\n    return {\n      ngModule: CodeInputModule,\n      providers: [{\n        provide: CodeInputComponentConfigToken,\n        useValue: config\n      }]\n    };\n  }\n}\n/** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\nCodeInputModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule],\n    declarations: [CodeInputComponent],\n    exports: [CodeInputComponent]\n  }]\n}];\n\n/*\r\n * Public API Surface of code-input\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { CodeInputComponent, CodeInputModule, CodeInputComponentConfigToken as ɵa };","map":{"version":3,"names":["__awaiter","InjectionToken","EventEmitter","Component","Optional","Inject","ViewChildren","Input","Output","NgModule","CommonModule","CodeInputComponentConfigToken","defaultComponentConfig","codeLength","inputType","initialFocusField","undefined","isCharsCode","isCodeHidden","isPrevFocusableAfterClearing","isFocusingOnLastByClickIfFilled","code","disabled","autocapitalize","InputState","CodeInputComponent","constructor","config","isNonDigitsCode","codeChanged","codeCompleted","placeholders","inputs","inputsStates","state","isFocusingAfterAppearingCompleted","isInitialFocusFieldEnabled","Object","assign","prop","hasOwnProperty","ngOnInit","isEmpty","onCodeLengthChanges","ngAfterViewInit","inputsListSubscription","inputsList","changes","subscribe","onInputsListChanges","bind","ngAfterViewChecked","focusOnInputAfterAppearing","ngOnChanges","onInputCodeChanges","ngOnDestroy","unsubscribe","reset","isChangesEmitting","focusOnField","emitChanges","index","_codeLength","Error","focus","onClick","e","target","last","isFilled","getCurrentFilledCode","length","setTimeout","onInput","i","value","data","canInputValue","preventDefault","stopPropagation","setInputValue","setStateForInput","values","toString","trim","split","j","next","blur","onPaste","clipboardData","getData","valIndex","input","val","onKeydown","isTargetEmpty","prev","isBackspaceKey","isDeleteKey","forEach","chars","isAllCharsAreAllowed","char","numbers","Array","fill","splice","list","inputsToAdd","filter","item","map","nativeElement","states","ready","document","activeElement","emitCode","emit","isBackspace","key","toLowerCase","keyCode","Promise","resolve","isReset","getStateForInput","selectionStart","valueClassCSS","emptyClassCSS","classList","remove","parentElement","add","isDigitsValue","test","indexOf","decorators","type","args","selector","template","styles","ctorParameters","propDecorators","CodeInputModule","forRoot","ngModule","providers","provide","useValue","imports","declarations","exports","ɵa"],"sources":["C:/Users/yaasm/IdeaProjects/CloudUP_FrontTestYassmine/node_modules/angular-code-input/fesm2015/angular-code-input.js"],"sourcesContent":["import { __awaiter } from 'tslib';\nimport { InjectionToken, EventEmitter, Component, Optional, Inject, ViewChildren, Input, Output, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nconst CodeInputComponentConfigToken = new InjectionToken('CodeInputComponentConfig');\r\nconst defaultComponentConfig = {\r\n    codeLength: 4,\r\n    inputType: 'tel',\r\n    initialFocusField: undefined,\r\n    isCharsCode: false,\r\n    isCodeHidden: false,\r\n    isPrevFocusableAfterClearing: true,\r\n    isFocusingOnLastByClickIfFilled: false,\r\n    code: undefined,\r\n    disabled: false,\r\n    autocapitalize: undefined\r\n};\n\nvar InputState;\r\n(function (InputState) {\r\n    InputState[InputState[\"ready\"] = 0] = \"ready\";\r\n    InputState[InputState[\"reset\"] = 1] = \"reset\";\r\n})(InputState || (InputState = {}));\r\nclass CodeInputComponent {\r\n    constructor(config) {\r\n        /** @deprecated Use isCharsCode prop instead. */\r\n        this.isNonDigitsCode = false;\r\n        this.codeChanged = new EventEmitter();\r\n        this.codeCompleted = new EventEmitter();\r\n        this.placeholders = [];\r\n        this.inputs = [];\r\n        this.inputsStates = [];\r\n        this.state = {\r\n            isFocusingAfterAppearingCompleted: false,\r\n            isInitialFocusFieldEnabled: false\r\n        };\r\n        Object.assign(this, defaultComponentConfig);\r\n        if (!config) {\r\n            return;\r\n        }\r\n        // filtering for only valid config props\r\n        for (const prop in config) {\r\n            if (!config.hasOwnProperty(prop)) {\r\n                continue;\r\n            }\r\n            if (!defaultComponentConfig.hasOwnProperty(prop)) {\r\n                continue;\r\n            }\r\n            // @ts-ignore\r\n            this[prop] = config[prop];\r\n        }\r\n    }\r\n    /**\r\n     * Life cycle\r\n     */\r\n    ngOnInit() {\r\n        // defining the state\r\n        this.state.isInitialFocusFieldEnabled = !this.isEmpty(this.initialFocusField);\r\n        // initiating the code\r\n        this.onCodeLengthChanges();\r\n    }\r\n    ngAfterViewInit() {\r\n        // initiation of the inputs\r\n        this.inputsListSubscription = this.inputsList.changes.subscribe(this.onInputsListChanges.bind(this));\r\n        this.onInputsListChanges(this.inputsList);\r\n    }\r\n    ngAfterViewChecked() {\r\n        this.focusOnInputAfterAppearing();\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (changes.code) {\r\n            this.onInputCodeChanges();\r\n        }\r\n        if (changes.codeLength) {\r\n            this.onCodeLengthChanges();\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        if (this.inputsListSubscription) {\r\n            this.inputsListSubscription.unsubscribe();\r\n        }\r\n    }\r\n    /**\r\n     * Methods\r\n     */\r\n    reset(isChangesEmitting = false) {\r\n        // resetting the code to its initial value or to an empty value\r\n        this.onInputCodeChanges();\r\n        if (this.state.isInitialFocusFieldEnabled) {\r\n            // tslint:disable-next-line:no-non-null-assertion\r\n            this.focusOnField(this.initialFocusField);\r\n        }\r\n        if (isChangesEmitting) {\r\n            this.emitChanges();\r\n        }\r\n    }\r\n    focusOnField(index) {\r\n        if (index >= this._codeLength) {\r\n            throw new Error('The index of the focusing input box should be less than the codeLength.');\r\n        }\r\n        this.inputs[index].focus();\r\n    }\r\n    onClick(e) {\r\n        // handle click events only if the the prop is enabled\r\n        if (!this.isFocusingOnLastByClickIfFilled) {\r\n            return;\r\n        }\r\n        const target = e.target;\r\n        const last = this.inputs[this._codeLength - 1];\r\n        // already focused\r\n        if (target === last) {\r\n            return;\r\n        }\r\n        // check filling\r\n        const isFilled = this.getCurrentFilledCode().length >= this._codeLength;\r\n        if (!isFilled) {\r\n            return;\r\n        }\r\n        // focusing on the last input if is filled\r\n        setTimeout(() => last.focus());\r\n    }\r\n    onInput(e, i) {\r\n        const target = e.target;\r\n        const value = e.data || target.value;\r\n        if (this.isEmpty(value)) {\r\n            return;\r\n        }\r\n        // only digits are allowed if isCharsCode flag is absent/false\r\n        if (!this.canInputValue(value)) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            this.setInputValue(target, null);\r\n            this.setStateForInput(target, InputState.reset);\r\n            return;\r\n        }\r\n        const values = value.toString().trim().split('');\r\n        for (let j = 0; j < values.length; j++) {\r\n            const index = j + i;\r\n            if (index > this._codeLength - 1) {\r\n                break;\r\n            }\r\n            this.setInputValue(this.inputs[index], values[j]);\r\n        }\r\n        this.emitChanges();\r\n        const next = i + values.length;\r\n        if (next > this._codeLength - 1) {\r\n            target.blur();\r\n            return;\r\n        }\r\n        this.inputs[next].focus();\r\n    }\r\n    onPaste(e, i) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        const data = e.clipboardData ? e.clipboardData.getData('text').trim() : undefined;\r\n        if (this.isEmpty(data)) {\r\n            return;\r\n        }\r\n        // Convert paste text into iterable\r\n        // tslint:disable-next-line:no-non-null-assertion\r\n        const values = data.split('');\r\n        let valIndex = 0;\r\n        for (let j = i; j < this.inputs.length; j++) {\r\n            // The values end is reached. Loop exit\r\n            if (valIndex === values.length) {\r\n                break;\r\n            }\r\n            const input = this.inputs[j];\r\n            const val = values[valIndex];\r\n            // Cancel the loop when a value cannot be used\r\n            if (!this.canInputValue(val)) {\r\n                this.setInputValue(input, null);\r\n                this.setStateForInput(input, InputState.reset);\r\n                return;\r\n            }\r\n            this.setInputValue(input, val.toString());\r\n            valIndex++;\r\n        }\r\n        this.inputs[i].blur();\r\n        this.emitChanges();\r\n    }\r\n    onKeydown(e, i) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const target = e.target;\r\n            const isTargetEmpty = this.isEmpty(target.value);\r\n            const prev = i - 1;\r\n            // processing only the backspace and delete key events\r\n            const isBackspaceKey = yield this.isBackspaceKey(e);\r\n            const isDeleteKey = this.isDeleteKey(e);\r\n            if (!isBackspaceKey && !isDeleteKey) {\r\n                return;\r\n            }\r\n            e.preventDefault();\r\n            this.setInputValue(target, null);\r\n            if (!isTargetEmpty) {\r\n                this.emitChanges();\r\n            }\r\n            // preventing to focusing on the previous field if it does not exist or the delete key has been pressed\r\n            if (prev < 0 || isDeleteKey) {\r\n                return;\r\n            }\r\n            if (isTargetEmpty || this.isPrevFocusableAfterClearing) {\r\n                this.inputs[prev].focus();\r\n            }\r\n        });\r\n    }\r\n    onInputCodeChanges() {\r\n        if (!this.inputs.length) {\r\n            return;\r\n        }\r\n        if (this.isEmpty(this.code)) {\r\n            this.inputs.forEach((input) => {\r\n                this.setInputValue(input, null);\r\n            });\r\n            return;\r\n        }\r\n        // tslint:disable-next-line:no-non-null-assertion\r\n        const chars = this.code.toString().trim().split('');\r\n        // checking if all the values are correct\r\n        let isAllCharsAreAllowed = true;\r\n        for (const char of chars) {\r\n            if (!this.canInputValue(char)) {\r\n                isAllCharsAreAllowed = false;\r\n                break;\r\n            }\r\n        }\r\n        this.inputs.forEach((input, index) => {\r\n            const value = isAllCharsAreAllowed ? chars[index] : null;\r\n            this.setInputValue(input, value);\r\n        });\r\n    }\r\n    onCodeLengthChanges() {\r\n        if (!this.codeLength) {\r\n            return;\r\n        }\r\n        this._codeLength = this.codeLength;\r\n        if (this._codeLength > this.placeholders.length) {\r\n            const numbers = Array(this._codeLength - this.placeholders.length).fill(1);\r\n            this.placeholders.splice(this.placeholders.length - 1, 0, ...numbers);\r\n        }\r\n        else if (this._codeLength < this.placeholders.length) {\r\n            this.placeholders.splice(this._codeLength);\r\n        }\r\n    }\r\n    onInputsListChanges(list) {\r\n        if (list.length > this.inputs.length) {\r\n            const inputsToAdd = list.filter((item, index) => index > this.inputs.length - 1);\r\n            this.inputs.splice(this.inputs.length, 0, ...inputsToAdd.map(item => item.nativeElement));\r\n            const states = Array(inputsToAdd.length).fill(InputState.ready);\r\n            this.inputsStates.splice(this.inputsStates.length, 0, ...states);\r\n        }\r\n        else if (list.length < this.inputs.length) {\r\n            this.inputs.splice(list.length);\r\n            this.inputsStates.splice(list.length);\r\n        }\r\n        // filling the inputs after changing of their count\r\n        this.onInputCodeChanges();\r\n    }\r\n    focusOnInputAfterAppearing() {\r\n        if (!this.state.isInitialFocusFieldEnabled) {\r\n            return;\r\n        }\r\n        if (this.state.isFocusingAfterAppearingCompleted) {\r\n            return;\r\n        }\r\n        // tslint:disable-next-line:no-non-null-assertion\r\n        this.focusOnField(this.initialFocusField);\r\n        // tslint:disable-next-line:no-non-null-assertion\r\n        this.state.isFocusingAfterAppearingCompleted = document.activeElement === this.inputs[this.initialFocusField];\r\n    }\r\n    emitChanges() {\r\n        setTimeout(() => this.emitCode(), 50);\r\n    }\r\n    emitCode() {\r\n        const code = this.getCurrentFilledCode();\r\n        this.codeChanged.emit(code);\r\n        if (code.length >= this._codeLength) {\r\n            this.codeCompleted.emit(code);\r\n        }\r\n    }\r\n    getCurrentFilledCode() {\r\n        let code = '';\r\n        for (const input of this.inputs) {\r\n            if (!this.isEmpty(input.value)) {\r\n                code += input.value;\r\n            }\r\n        }\r\n        return code;\r\n    }\r\n    isBackspaceKey(e) {\r\n        const isBackspace = (e.key && e.key.toLowerCase() === 'backspace') || (e.keyCode && e.keyCode === 8);\r\n        if (isBackspace) {\r\n            return Promise.resolve(true);\r\n        }\r\n        // process only key with placeholder keycode on android devices\r\n        if (!e.keyCode || e.keyCode !== 229) {\r\n            return Promise.resolve(false);\r\n        }\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                const input = e.target;\r\n                const isReset = this.getStateForInput(input) === InputState.reset;\r\n                if (isReset) {\r\n                    this.setStateForInput(input, InputState.ready);\r\n                }\r\n                // if backspace key pressed the caret will have position 0 (for single value field)\r\n                resolve(input.selectionStart === 0 && !isReset);\r\n            });\r\n        });\r\n    }\r\n    isDeleteKey(e) {\r\n        return (e.key && e.key.toLowerCase() === 'delete') || (e.keyCode && e.keyCode === 46);\r\n    }\r\n    setInputValue(input, value) {\r\n        const isEmpty = this.isEmpty(value);\r\n        const valueClassCSS = 'has-value';\r\n        const emptyClassCSS = 'empty';\r\n        if (isEmpty) {\r\n            input.value = '';\r\n            input.classList.remove(valueClassCSS);\r\n            // tslint:disable-next-line:no-non-null-assertion\r\n            input.parentElement.classList.add(emptyClassCSS);\r\n        }\r\n        else {\r\n            input.value = value;\r\n            input.classList.add(valueClassCSS);\r\n            // tslint:disable-next-line:no-non-null-assertion\r\n            input.parentElement.classList.remove(emptyClassCSS);\r\n        }\r\n    }\r\n    canInputValue(value) {\r\n        if (this.isEmpty(value)) {\r\n            return false;\r\n        }\r\n        const isDigitsValue = /^[0-9]+$/.test(value.toString());\r\n        return isDigitsValue || (this.isCharsCode || this.isNonDigitsCode);\r\n    }\r\n    setStateForInput(input, state) {\r\n        const index = this.inputs.indexOf(input);\r\n        if (index < 0) {\r\n            return;\r\n        }\r\n        this.inputsStates[index] = state;\r\n    }\r\n    getStateForInput(input) {\r\n        const index = this.inputs.indexOf(input);\r\n        return this.inputsStates[index];\r\n    }\r\n    isEmpty(value) {\r\n        return value === null || value === undefined || !value.toString().length;\r\n    }\r\n}\r\n/** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\r\nCodeInputComponent.decorators = [\r\n    { type: Component, args: [{\r\n                // tslint:disable-next-line:component-selector\r\n                selector: 'code-input',\r\n                template: \"<span *ngFor=\\\"let holder of placeholders; index as i\\\"\\n      [class.code-hidden]=\\\"isCodeHidden\\\">\\n  <input #input\\n         (click)=\\\"onClick($event)\\\"\\n         (paste)=\\\"onPaste($event, i)\\\"\\n         (input)=\\\"onInput($event, i)\\\"\\n         (keydown)=\\\"onKeydown($event, i)\\\"\\n         [type]=\\\"inputType\\\"\\n         [disabled]=\\\"disabled\\\"\\n         [attr.autocapitalize]=\\\"autocapitalize\\\"\\n         autocomplete=\\\"one-time-code\\\"/>\\n</span>\\n\",\r\n                styles: [\":host{--text-security-type:disc;--item-spacing:4px;--item-height:4.375em;--item-border:1px solid #ddd;--item-border-bottom:1px solid #ddd;--item-border-has-value:1px solid #ddd;--item-border-bottom-has-value:1px solid #ddd;--item-border-focused:1px solid #ddd;--item-border-bottom-focused:1px solid #ddd;--item-shadow-focused:0px 1px 5px #ddd;--item-border-radius:5px;--item-background:transparent;--color:#171516;display:flex;transform:translateZ(0);font-size:inherit;color:var(--color)}:host span{display:block;flex:1;padding-right:var(--item-spacing)}:host span:first-child{padding-left:var(--item-spacing)}:host span.code-hidden input{text-security:var(--text-security-type);-webkit-text-security:var(--text-security-type);-moz-text-security:var(--text-security-type)}:host input{width:100%;height:var(--item-height);color:inherit;background:var(--item-background);text-align:center;font-size:inherit;border:var(--item-border);border-bottom:var(--item-border-bottom);border-radius:var(--item-border-radius);-webkit-appearance:none;transform:translateZ(0);-webkit-transform:translateZ(0);outline:none}:host input.has-value{border:var(--item-border-has-value);border-bottom:var(--item-border-bottom-has-value)}:host input:focus{border:var(--item-border-focused);border-bottom:var(--item-border-bottom-focused);box-shadow:var(--item-shadow-focused)}\"]\r\n            },] }\r\n];\r\n/**\r\n * @type {function(): !Array<(null|{\r\n *   type: ?,\r\n *   decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>),\r\n * })>}\r\n * @nocollapse\r\n */\r\nCodeInputComponent.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CodeInputComponentConfigToken,] }] }\r\n];\r\n/** @type {!Object<string, !Array<{type: !Function, args: (undefined|!Array<?>)}>>} */\r\nCodeInputComponent.propDecorators = {\r\n    inputsList: [{ type: ViewChildren, args: ['input',] }],\r\n    codeLength: [{ type: Input }],\r\n    inputType: [{ type: Input }],\r\n    initialFocusField: [{ type: Input }],\r\n    isNonDigitsCode: [{ type: Input }],\r\n    isCharsCode: [{ type: Input }],\r\n    isCodeHidden: [{ type: Input }],\r\n    isPrevFocusableAfterClearing: [{ type: Input }],\r\n    isFocusingOnLastByClickIfFilled: [{ type: Input }],\r\n    code: [{ type: Input }],\r\n    disabled: [{ type: Input }],\r\n    autocapitalize: [{ type: Input }],\r\n    codeChanged: [{ type: Output }],\r\n    codeCompleted: [{ type: Output }]\r\n};\n\nclass CodeInputModule {\r\n    static forRoot(config) {\r\n        return {\r\n            ngModule: CodeInputModule,\r\n            providers: [\r\n                { provide: CodeInputComponentConfigToken, useValue: config }\r\n            ]\r\n        };\r\n    }\r\n}\r\n/** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\r\nCodeInputModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                imports: [\r\n                    CommonModule\r\n                ],\r\n                declarations: [\r\n                    CodeInputComponent\r\n                ],\r\n                exports: [\r\n                    CodeInputComponent\r\n                ]\r\n            },] }\r\n];\n\n/*\r\n * Public API Surface of code-input\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { CodeInputComponent, CodeInputModule, CodeInputComponentConfigToken as ɵa };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}