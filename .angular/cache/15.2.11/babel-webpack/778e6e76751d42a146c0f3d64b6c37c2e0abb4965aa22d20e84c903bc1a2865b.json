{"ast":null,"code":"// @ts-ignore\nimport { Etat } from '../../../Models/reservation.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../Services/reservation.service\";\nimport * as i2 from \"../../../Services/time-slot.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction BookingComponent_li_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 16)(1, \"a\", 17);\n    i0.ɵɵlistener(\"click\", function BookingComponent_li_6_Template_a_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const day_r4 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.selectDay(day_r4));\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const day_r4 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"active\", ctx_r0.selectedDay === day_r4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(day_r4);\n  }\n}\nfunction BookingComponent_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \"No time slots available\");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"selected\": a0\n  };\n};\nfunction BookingComponent_li_16_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 18);\n    i0.ɵɵlistener(\"click\", function BookingComponent_li_16_Template_li_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const slot_r7 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.selectSlot(slot_r7));\n    });\n    i0.ɵɵelementStart(1, \"a\", 19)(2, \"strong\");\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(5, \" to \");\n    i0.ɵɵelementStart(6, \"strong\");\n    i0.ɵɵtext(7);\n    i0.ɵɵpipe(8, \"date\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const slot_r7 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(11, _c0, ctx_r3.selectedSlot === slot_r7));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind3(4, 3, slot_r7.startTime, \"h:mm a\", \"GMT+0100\"));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind3(8, 7, slot_r7.endTime, \"h:mm a\", \"GMT+0100\"));\n  }\n}\nexport class BookingComponent {\n  constructor(reservationService, timeSlotService, route, router) {\n    this.reservationService = reservationService;\n    this.timeSlotService = timeSlotService;\n    this.route = route;\n    this.router = router;\n    this.days = ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY'];\n    this.daterange = {};\n    this.reservationDate = new Date(); // Current date and time\n    this.reservationStatus = Etat.Pending;\n    this.selectedSlot = null;\n  }\n  selectSlot(slot) {\n    console.log('Selected slot:', slot);\n    if (slot && slot.startTime) {\n      this.selectedSlot = slot;\n      this.reservationDate = new Date(slot.startTime);\n    } else {\n      console.error('Slot or slot.startTime is undefined');\n    }\n  }\n  // tslint:disable-next-line:typedef\n  loadAvailableTimeSlots(professorId) {\n    this.timeSlotService.getAvailableTimeSlots(professorId).subscribe(slots => {\n      this.timeSlots = slots;\n    }, error => {\n      console.error('Error fetching time slots', error);\n    });\n  }\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      this.selectedProfessorId = +params.professorId; // The '+' converts the parameter to a number\n      this.selectedCoursId = +params.coursID; // Likewise for coursID\n      // ...\n    });\n  }\n\n  formatDate(date) {\n    // You will need to convert this date to the format your backend expects\n    // This is just a placeholder; you'll need to implement the actual conversion\n    return date;\n  }\n  // tslint:disable-next-line:typedef\n  /* addReservation(etudiantID: number, selectedProfessorId: number, selectedCoursId: number) {\r\n     if (!this.selectedSlot) {\r\n       alert('Please select a time slot first.');\r\n       return;}\r\n     const reservation = {\r\n       dateR: this.formatDate(this.selectedDate),\r\n           statusR: this.reservationStatus\r\n     };\r\n     console.log('Sending reservation data:', reservation);\r\n    \r\n     this.reservationService.addReservation(reservation, etudiantID, selectedProfessorId, selectedCoursId).subscribe({\r\n       next: (response) => {console.log('Reservation added:', response);\r\n                            this.router.navigateByUrl(`/students/booking-success`); },\r\n       error: (error) => console.error('Error adding reservation:', error)\r\n     });\r\n   }*/\n  // tslint:disable-next-line:typedef\n  addReservation(etudiantID, selectedProfessorId, selectedCoursId) {\n    if (this.selectedSlot && this.selectedSlot.startTime) {\n      const reservationData = {\n        dateR: this.selectedSlot.startTime,\n        statusR: this.reservationStatus\n      };\n      console.log('Reservation data being sent:', reservationData);\n      this.reservationService.addReservation(reservationData, etudiantID, selectedProfessorId, selectedCoursId).subscribe({\n        next: response => {\n          console.log('Reservation added:', response);\n          this.router.navigateByUrl(`/students/booking-success`);\n        },\n        error: error => console.error('Error adding reservation:', error)\n      });\n    } else {\n      console.error('No time slot selected or start time is undefined.');\n    }\n  }\n  onDateChange(event) {\n    const input = event.target;\n    this.selectedDate = input.value; // The value will be in \"yyyy-MM-dd\" format\n  }\n\n  selectDay(day) {\n    this.selectedDay = day;\n    // Fetch the time slots for the selected day from your service\n    this.timeSlotService.getTimeSlotsForDay(this.selectedProfessorId, day).subscribe(slots => {\n      this.timeSlots = slots;\n    }, error => {\n      console.error('Error fetching time slots:', error);\n      this.timeSlots = [];\n    });\n  }\n}\nBookingComponent.ɵfac = function BookingComponent_Factory(t) {\n  return new (t || BookingComponent)(i0.ɵɵdirectiveInject(i1.ReservationService), i0.ɵɵdirectiveInject(i2.TimeSlotService), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i3.Router));\n};\nBookingComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: BookingComponent,\n  selectors: [[\"app-booking\"]],\n  decls: 20,\n  vars: 2,\n  consts: [[1, \"row\"], [1, \"col-md-12\"], [1, \"card\", \"schedule-widget\", \"mb-0\"], [1, \"schedule-header\"], [1, \"schedule-nav\"], [1, \"nav\", \"nav-tabs\", \"nav-justified\"], [\"class\", \"nav-item\", 4, \"ngFor\", \"ngForOf\"], [\"noSlotsAvailable\", \"\"], [1, \"container\"], [1, \"card\", \"booking-schedule\", \"schedule-widget\"], [1, \"schedule-cont\"], [1, \"time-slot\"], [1, \"clearfix\"], [3, \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"submit-section\", \"proceed-btn\", \"text-right\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"nav-item\"], [1, \"nav-link\", 3, \"click\"], [3, \"click\"], [1, \"timing\", 3, \"ngClass\"]],\n  template: function BookingComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"ul\", 5);\n      i0.ɵɵtemplate(6, BookingComponent_li_6_Template, 3, 3, \"li\", 6);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵtemplate(7, BookingComponent_ng_template_7_Template, 2, 0, \"ng-template\", null, 7, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(9, \"div\", 8)(10, \"div\", 9)(11, \"div\", 10)(12, \"div\", 0)(13, \"div\", 1)(14, \"div\", 11)(15, \"ul\", 12);\n      i0.ɵɵtemplate(16, BookingComponent_li_16_Template, 9, 13, \"li\", 13);\n      i0.ɵɵelementEnd()()()()()()();\n      i0.ɵɵelementStart(17, \"div\", 14)(18, \"button\", 15);\n      i0.ɵɵlistener(\"click\", function BookingComponent_Template_button_click_18_listener() {\n        return ctx.addReservation(2, ctx.selectedProfessorId, ctx.selectedCoursId);\n      });\n      i0.ɵɵtext(19, \"Confirm\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngForOf\", ctx.days);\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"ngForOf\", ctx.timeSlots);\n    }\n  },\n  dependencies: [i4.NgClass, i4.NgForOf, i4.DatePipe],\n  styles: [\"#daterange[_ngcontent-%COMP%] {\\r\\n  border: none;\\r\\n}\\r\\n\\r\\n\\r\\n.schedule-widget[_ngcontent-%COMP%]   .schedule-cont[_ngcontent-%COMP%]   .time-slot[_ngcontent-%COMP%] {\\r\\n  padding: 15px;\\r\\n  white-space: nowrap;\\r\\n  overflow-x: auto; \\r\\n}\\r\\n\\r\\n.schedule-widget[_ngcontent-%COMP%]   .schedule-cont[_ngcontent-%COMP%]   .time-slot[_ngcontent-%COMP%]   .availability[_ngcontent-%COMP%] {\\r\\n  display: inline-block; \\r\\n  background-color: #f8f9fa;\\r\\n  border-radius: 5px;\\r\\n  padding: 20px;\\r\\n  margin-right: 20px; \\r\\n  margin-bottom: 20px; \\r\\n}\\r\\n\\r\\n.schedule-widget[_ngcontent-%COMP%]   .schedule-header[_ngcontent-%COMP%]   .schedule-nav[_ngcontent-%COMP%]   .nav-link[_ngcontent-%COMP%] {\\r\\n  padding: 0.5rem 1rem; \\r\\n}\\r\\n\\r\\n.submit-section[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%] {\\r\\n  margin-top: 10px; \\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYWxsLW1vZHVsZXMvc3R1ZGVudHMvYm9va2luZy9ib29raW5nLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxZQUFZO0FBQ2Q7OztBQUdBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQixnQkFBZ0IsRUFBRSx1REFBdUQ7QUFDM0U7O0FBRUE7RUFDRSxxQkFBcUIsRUFBRSw2Q0FBNkM7RUFDcEUseUJBQXlCO0VBQ3pCLGtCQUFrQjtFQUNsQixhQUFhO0VBQ2Isa0JBQWtCLEVBQUUsd0JBQXdCO0VBQzVDLG1CQUFtQixFQUFFLG9DQUFvQztBQUMzRDs7QUFFQTtFQUNFLG9CQUFvQixFQUFFLGlDQUFpQztBQUN6RDs7QUFFQTtFQUNFLGdCQUFnQixFQUFFLG1DQUFtQztBQUN2RCIsInNvdXJjZXNDb250ZW50IjpbIiNkYXRlcmFuZ2Uge1xyXG4gIGJvcmRlcjogbm9uZTtcclxufVxyXG5cclxuXHJcbi5zY2hlZHVsZS13aWRnZXQgLnNjaGVkdWxlLWNvbnQgLnRpbWUtc2xvdCB7XHJcbiAgcGFkZGluZzogMTVweDtcclxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xyXG4gIG92ZXJmbG93LXg6IGF1dG87IC8qIEFsbG93cyBob3Jpem9udGFsIHNjcm9sbGluZyBpZiBjb250ZW50IGlzIHRvbyB3aWRlICovXHJcbn1cclxuXHJcbi5zY2hlZHVsZS13aWRnZXQgLnNjaGVkdWxlLWNvbnQgLnRpbWUtc2xvdCAuYXZhaWxhYmlsaXR5IHtcclxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IC8qIEFsbG93cyB0aGUgYmFja2dyb3VuZCB0byBmaXQgdGhlIGNvbnRlbnQgKi9cclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOWZhO1xyXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcclxuICBwYWRkaW5nOiAyMHB4O1xyXG4gIG1hcmdpbi1yaWdodDogMjBweDsgLyogU3BhY2UgYmV0d2VlbiBpdGVtcyAqL1xyXG4gIG1hcmdpbi1ib3R0b206IDIwcHg7IC8qIFNwYWNlIGJldHdlZW4gcm93cyB3aGVuIHdyYXBwZWQgKi9cclxufVxyXG5cclxuLnNjaGVkdWxlLXdpZGdldCAuc2NoZWR1bGUtaGVhZGVyIC5zY2hlZHVsZS1uYXYgLm5hdi1saW5rIHtcclxuICBwYWRkaW5nOiAwLjVyZW0gMXJlbTsgLyogQ29tZm9ydGFibGUgY2xpY2svdGFwIHRhcmdldCAqL1xyXG59XHJcblxyXG4uc3VibWl0LXNlY3Rpb24gLmJ0biB7XHJcbiAgbWFyZ2luLXRvcDogMTBweDsgLyogU3BhY2luZyBmcm9tIHRoZSBhYm92ZSBlbGVtZW50ICovXHJcbn1cclxuXHJcblxyXG5cclxuXHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["Etat","i0","BookingComponent","constructor","reservationService","timeSlotService","route","router","Date","Pending","selectSlot","slot","console","log","startTime","selectedSlot","reservationDate","error","loadAvailableTimeSlots","professorId","getAvailableTimeSlots","subscribe","slots","timeSlots","ngOnInit","params","selectedProfessorId","selectedCoursId","coursID","formatDate","date","addReservation","etudiantID","reservationData","dateR","statusR","reservationStatus","next","response","navigateByUrl","onDateChange","event","input","target","selectedDate","value","selectDay","day","selectedDay","getTimeSlotsForDay","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\Sami\\Desktop\\CloudUP_Front\\src\\app\\all-modules\\students\\booking\\booking.component.ts","C:\\Users\\Sami\\Desktop\\CloudUP_Front\\src\\app\\all-modules\\students\\booking\\booking.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\n\r\nimport {ReservationService} from '../../../Services/reservation.service';\r\nimport {TimeSlotService} from '../../../Services/time-slot.service';\r\n// @ts-ignore\r\nimport {Etat, Reservation} from '../../../Models/reservation.model';\r\n// @ts-ignore\r\nimport {TimeSlot} from '../../../Models/TimeSlot.model';\r\n// @ts-ignore\r\nimport {User} from '../../../Models/user.model';\r\n\r\n@Component({\r\n  selector: 'app-booking',\r\n  templateUrl: './booking.component.html',\r\n  styleUrls: ['./booking.component.css']\r\n})\r\nexport class BookingComponent implements OnInit {\r\n  public selectedProfessorId!: any  ;\r\n  public selectedCoursId!: any ;\r\n  timeSlots!: any[];\r\n  days = ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY'];\r\n  selectedDay!: string;\r\n\r\n  public professor!: User ;\r\n  public reservation!: Reservation ;\r\n  public daterange: any = {};\r\n  reservationDate = new Date(); // Current date and time\r\n  reservationStatus = Etat.Pending;\r\n  public selectedDate!: string;\r\n\r\n\r\n\r\n\r\n  constructor(private reservationService: ReservationService,\r\n              private timeSlotService: TimeSlotService,\r\n              private route: ActivatedRoute,\r\n              private router: Router, ) { }\r\n\r\n\r\n  selectedSlot: TimeSlot | null = null;\r\n\r\n\r\n  selectSlot(slot: TimeSlot): void {\r\n    console.log('Selected slot:', slot);\r\n    if (slot && slot.startTime) {\r\n      this.selectedSlot = slot;\r\n      this.reservationDate = new Date(slot.startTime);\r\n    } else {\r\n      console.error('Slot or slot.startTime is undefined');\r\n    }\r\n  }\r\n\r\n  // tslint:disable-next-line:typedef\r\n  loadAvailableTimeSlots(professorId: number) {\r\n    this.timeSlotService.getAvailableTimeSlots(professorId).subscribe(\r\n      (slots) => {\r\n        this.timeSlots = slots;\r\n      },\r\n      (error) => {\r\n        console.error('Error fetching time slots', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.route.params.subscribe(params => {\r\n      this.selectedProfessorId = +params.professorId; // The '+' converts the parameter to a number\r\n      this.selectedCoursId = +params.coursID; // Likewise for coursID\r\n      // ...\r\n    });\r\n  }\r\n  private formatDate(date: string): string {\r\n    // You will need to convert this date to the format your backend expects\r\n    // This is just a placeholder; you'll need to implement the actual conversion\r\n    return date;\r\n  }\r\n\r\n  // tslint:disable-next-line:typedef\r\n  /* addReservation(etudiantID: number, selectedProfessorId: number, selectedCoursId: number) {\r\n     if (!this.selectedSlot) {\r\n       alert('Please select a time slot first.');\r\n       return;}\r\n     const reservation = {\r\n       dateR: this.formatDate(this.selectedDate),\r\n\r\n       statusR: this.reservationStatus\r\n     };\r\n     console.log('Sending reservation data:', reservation);\r\n\r\n\r\n     this.reservationService.addReservation(reservation, etudiantID, selectedProfessorId, selectedCoursId).subscribe({\r\n       next: (response) => {console.log('Reservation added:', response);\r\n                            this.router.navigateByUrl(`/students/booking-success`); },\r\n       error: (error) => console.error('Error adding reservation:', error)\r\n     });\r\n   }*/\r\n\r\n// tslint:disable-next-line:typedef\r\n  addReservation(etudiantID: number, selectedProfessorId: number, selectedCoursId: number) {\r\n    if (this.selectedSlot && this.selectedSlot.startTime) {\r\n      const reservationData = {\r\n        dateR: this.selectedSlot.startTime,\r\n        statusR: this.reservationStatus\r\n      };\r\n\r\n      console.log('Reservation data being sent:', reservationData);\r\n\r\n      this.reservationService.addReservation(reservationData, etudiantID, selectedProfessorId, selectedCoursId)\r\n        .subscribe({\r\n          next: (response) => {console.log('Reservation added:', response);\r\n                               this.router.navigateByUrl(`/students/booking-success`); },\r\n          error: (error) => console.error('Error adding reservation:', error)}\r\n\r\n        );\r\n    } else {\r\n      console.error('No time slot selected or start time is undefined.');\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  onDateChange(event: Event): void {\r\n    const input = event.target as HTMLInputElement;\r\n    this.selectedDate = input.value; // The value will be in \"yyyy-MM-dd\" format\r\n  }\r\n\r\n  selectDay(day: string): void {\r\n    this.selectedDay = day;\r\n    // Fetch the time slots for the selected day from your service\r\n    this.timeSlotService.getTimeSlotsForDay(this.selectedProfessorId, day).subscribe(\r\n      slots => {\r\n        this.timeSlots = slots;\r\n      },\r\n      error => {\r\n        console.error('Error fetching time slots:', error);\r\n        this.timeSlots = [];\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","<div class=\"row\">\r\n  <div class=\"col-md-12\">\r\n    <div class=\"card schedule-widget mb-0\">\r\n      <div class=\"schedule-header\">\r\n        <!-- Schedule Nav -->\r\n        <div class=\"schedule-nav\">\r\n          <ul class=\"nav nav-tabs nav-justified\">\r\n            <li class=\"nav-item\" *ngFor=\"let day of days\">\r\n              <a class=\"nav-link\" [class.active]=\"selectedDay === day\" (click)=\"selectDay(day)\">{{ day }}</a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <ng-template #noSlotsAvailable>\r\n        <p>No time slots available</p>\r\n      </ng-template>\r\n    </div>\r\n  </div>\r\n</div>\r\n<!---->\r\n\r\n<div class=\"container\">\r\n  <div class=\"card booking-schedule schedule-widget\">\r\n    <div class=\"schedule-cont\">\r\n      <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n          <div class=\"time-slot\">\r\n            <ul class=\"clearfix\">\r\n\r\n\r\n              <li *ngFor=\"let slot of timeSlots\" (click)=\"selectSlot(slot)\">\r\n                <a class=\"timing\" [ngClass]=\"{'selected': selectedSlot === slot}\">\r\n                  <strong>{{ slot.startTime | date: 'h:mm a':'GMT+0100' }}</strong> to\r\n                  <strong>{{ slot.endTime | date: 'h:mm a':'GMT+0100' }}</strong>\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n\r\n<div class=\"submit-section proceed-btn text-right\">\r\n  <button (click)=\"addReservation(2, selectedProfessorId, selectedCoursId)\" class=\"btn btn-primary\">Confirm</button>\r\n</div>\r\n\r\n<!--  routerLink='/students/booking-success' /Submit Section -->\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}