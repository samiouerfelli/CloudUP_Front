{"ast":null,"code":"/* tslint:disable */\n/* eslint-disable */\nimport { HttpResponse } from '@angular/common/http';\nimport { filter, map } from 'rxjs/operators';\nimport { RequestBuilder } from '../../request-builder';\nexport function register(http, rootUrl, params, context) {\n  const rb = new RequestBuilder(rootUrl, register.PATH, 'post');\n  if (params) {\n    rb.body(params.body, 'application/json');\n  }\n  return http.request(rb.build({\n    responseType: 'json',\n    accept: 'application/json',\n    context\n  })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n    return r;\n  }));\n}\nregister.PATH = '/auth/Register';","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAAkCA,YAAY,QAAQ,sBAAsB;AAE5E,SAASC,MAAM,EAAEC,GAAG,QAAQ,gBAAgB;AAE5C,SAASC,cAAc,QAAQ,uBAAuB;AAQtD,OAAM,SAAUC,QAAQ,CAACC,IAAgB,EAAEC,OAAe,EAAEC,MAAuB,EAAEC,OAAqB;EAExG,MAAMC,EAAE,GAAG,IAAIN,cAAc,CAACG,OAAO,EAAEF,QAAQ,CAACM,IAAI,EAAE,MAAM,CAAC;EAC7D,IAAIH,MAAM,EAAE;IACVE,EAAE,CAACE,IAAI,CAACJ,MAAM,CAACI,IAAI,EAAE,kBAAkB,CAAC;;EAG1C,OAAON,IAAI,CAACO,OAAO,CACjBH,EAAE,CAACI,KAAK,CAAC;IAAEC,YAAY,EAAE,MAAM;IAAEC,MAAM,EAAE,kBAAkB;IAAEP;EAAO,CAAE,CAAC,CACxE,CAACQ,IAAI,CACJf,MAAM,CAAEgB,CAAM,IAA6BA,CAAC,YAAYjB,YAAY,CAAC,EACrEE,GAAG,CAAEe,CAAoB,IAAI;IAC3B,OAAOA,CACL;EACJ,CAAC,CAAC,CACH;AACH;AAEAb,QAAQ,CAACM,IAAI,GAAG,gBAAgB","names":["HttpResponse","filter","map","RequestBuilder","register","http","rootUrl","params","context","rb","PATH","body","request","build","responseType","accept","pipe","r"],"sourceRoot":"","sources":["C:\\Users\\yaasm\\IdeaProjects\\CloudUP_FrontTestYassmine\\src\\app\\services\\fn\\authentification\\register.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { StrictHttpResponse } from '../../strict-http-response';\r\nimport { RequestBuilder } from '../../request-builder';\r\n\r\nimport { RegistrationRequest } from '../../models/registration-request';\r\n\r\nexport interface Register$Params {\r\n      body: RegistrationRequest\r\n}\r\n\r\nexport function register(http: HttpClient, rootUrl: string, params: Register$Params, context?: HttpContext): Observable<StrictHttpResponse<{\r\n}>> {\r\n  const rb = new RequestBuilder(rootUrl, register.PATH, 'post');\r\n  if (params) {\r\n    rb.body(params.body, 'application/json');\r\n  }\r\n\r\n  return http.request(\r\n    rb.build({ responseType: 'json', accept: 'application/json', context })\r\n  ).pipe(\r\n    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n    map((r: HttpResponse<any>) => {\r\n      return r as StrictHttpResponse<{\r\n      }>;\r\n    })\r\n  );\r\n}\r\n\r\nregister.PATH = '/auth/Register';\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}