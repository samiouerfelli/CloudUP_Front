{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { authenticate } from '../fn/authentification/authenticate';\nimport { confirm } from '../fn/authentification/confirm';\nimport { register } from '../fn/authentification/register';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class AuthentificationService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `authenticate()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\n  authenticate$Response(params, context) {\n    return authenticate(this.http, this.rootUrl, params, context);\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `authenticate$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\n  authenticate(params, context) {\n    return this.authenticate$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `register()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\n  register$Response(params, context) {\n    return register(this.http, this.rootUrl, params, context);\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `register$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\n  register(params, context) {\n    return this.register$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `confirm()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  confirm$Response(params, context) {\n    return confirm(this.http, this.rootUrl, params, context);\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `confirm$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  confirm(params, context) {\n    return this.confirm$Response(params, context).pipe(map(r => r.body));\n  }\n}\n/** Path part for operation `authenticate()` */\nAuthentificationService.AuthenticatePath = '/auth/authenticate';\n/** Path part for operation `register()` */\nAuthentificationService.RegisterPath = '/auth/Register';\n/** Path part for operation `confirm()` */\nAuthentificationService.ConfirmPath = '/auth/activate-account';\nAuthentificationService.ɵfac = function AuthentificationService_Factory(t) {\n  return new (t || AuthentificationService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nAuthentificationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthentificationService,\n  factory: AuthentificationService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAKA,SAASA,GAAG,QAAQ,gBAAgB;AAEpC,SAASC,WAAW,QAAQ,iBAAiB;AAI7C,SAASC,YAAY,QAAQ,qCAAqC;AAGlE,SAASC,OAAO,QAAQ,gCAAgC;AAExD,SAASC,QAAQ,QAAQ,iCAAiC;;;;AAI1D,OAAM,MAAOC,uBAAwB,SAAQJ,WAAW;EACtDK,YAAYC,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAKA;;;;;;EAMAC,qBAAqB,CAACC,MAA2B,EAAEC,OAAqB;IACtE,OAAOT,YAAY,CAAC,IAAI,CAACM,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC/D;EAEA;;;;;;EAMAT,YAAY,CAACQ,MAA2B,EAAEC,OAAqB;IAC7D,OAAO,IAAI,CAACF,qBAAqB,CAACC,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACrDb,GAAG,CAAEc,CAA+C,IAA+BA,CAAC,CAACC,IAAI,CAAC,CAC3F;EACH;EAKA;;;;;;EAMAC,iBAAiB,CAACN,MAAuB,EAAEC,OAAqB;IAE9D,OAAOP,QAAQ,CAAC,IAAI,CAACI,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC3D;EAEA;;;;;;EAMAP,QAAQ,CAACM,MAAuB,EAAEC,OAAqB;IAErD,OAAO,IAAI,CAACK,iBAAiB,CAACN,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACjDb,GAAG,CAAEc,CACT,IACGA,CAAC,CAACC,IAAI,CAAC,CACP;EACH;EAKA;;;;;;EAMAE,gBAAgB,CAACP,MAAsB,EAAEC,OAAqB;IAC5D,OAAOR,OAAO,CAAC,IAAI,CAACK,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC1D;EAEA;;;;;;EAMAR,OAAO,CAACO,MAAsB,EAAEC,OAAqB;IACnD,OAAO,IAAI,CAACM,gBAAgB,CAACP,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CAChDb,GAAG,CAAEc,CAA2B,IAAWA,CAAC,CAACC,IAAI,CAAC,CACnD;EACH;;AA7EA;AACgBV,wCAAgB,GAAG,oBAAoB;AAwBvD;AACgBA,oCAAY,GAAG,gBAAgB;AA4B/C;AACgBA,mCAAW,GAAG,wBAAwB;;mBA5D3CA,uBAAuB;AAAA;;SAAvBA,uBAAuB;EAAAa,SAAvBb,uBAAuB;EAAAc,YADV;AAAM","names":["map","BaseService","authenticate","confirm","register","AuthentificationService","constructor","config","http","authenticate$Response","params","context","rootUrl","pipe","r","body","register$Response","confirm$Response","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\yaasm\\IdeaProjects\\CloudUP_FrontTestYassmine\\src\\app\\services\\services\\authentification.service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\n\r\nimport { authenticate } from '../fn/authentification/authenticate';\r\nimport { Authenticate$Params } from '../fn/authentification/authenticate';\r\nimport { AuthentificationResponse } from '../models/authentification-response';\r\nimport { confirm } from '../fn/authentification/confirm';\r\nimport { Confirm$Params } from '../fn/authentification/confirm';\r\nimport { register } from '../fn/authentification/register';\r\nimport { Register$Params } from '../fn/authentification/register';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthentificationService extends BaseService {\r\n  constructor(config: ApiConfiguration, http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /** Path part for operation `authenticate()` */\r\n  static readonly AuthenticatePath = '/auth/authenticate';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `authenticate()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  authenticate$Response(params: Authenticate$Params, context?: HttpContext): Observable<StrictHttpResponse<AuthentificationResponse>> {\r\n    return authenticate(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `authenticate$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  authenticate(params: Authenticate$Params, context?: HttpContext): Observable<AuthentificationResponse> {\r\n    return this.authenticate$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<AuthentificationResponse>): AuthentificationResponse => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `register()` */\r\n  static readonly RegisterPath = '/auth/Register';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `register()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  register$Response(params: Register$Params, context?: HttpContext): Observable<StrictHttpResponse<{\r\n}>> {\r\n    return register(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `register$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  register(params: Register$Params, context?: HttpContext): Observable<{\r\n}> {\r\n    return this.register$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<{\r\n}>): {\r\n} => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `confirm()` */\r\n  static readonly ConfirmPath = '/auth/activate-account';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `confirm()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  confirm$Response(params: Confirm$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {\r\n    return confirm(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `confirm$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  confirm(params: Confirm$Params, context?: HttpContext): Observable<void> {\r\n    return this.confirm$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<void>): void => r.body)\r\n    );\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}