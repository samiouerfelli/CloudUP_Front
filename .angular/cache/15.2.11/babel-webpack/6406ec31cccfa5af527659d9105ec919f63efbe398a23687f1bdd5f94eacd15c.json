{"ast":null,"code":"import { __awaiter } from 'tslib';\nimport { InjectionToken, EventEmitter, Component, Optional, Inject, ViewChildren, Input, Output, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nconst _c0 = [\"input\"];\nfunction CodeInputComponent_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"span\")(1, \"input\", 1, 2);\n    ɵngcc0.ɵɵlistener(\"click\", function CodeInputComponent_span_0_Template_input_click_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      const ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r4.onClick($event));\n    })(\"paste\", function CodeInputComponent_span_0_Template_input_paste_1_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r5);\n      const i_r2 = restoredCtx.index;\n      const ctx_r6 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r6.onPaste($event, i_r2));\n    })(\"input\", function CodeInputComponent_span_0_Template_input_input_1_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r5);\n      const i_r2 = restoredCtx.index;\n      const ctx_r7 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r7.onInput($event, i_r2));\n    })(\"keydown\", function CodeInputComponent_span_0_Template_input_keydown_1_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r5);\n      const i_r2 = restoredCtx.index;\n      const ctx_r8 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r8.onKeydown($event, i_r2));\n    });\n    ɵngcc0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"code-hidden\", ctx_r0.isCodeHidden);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"type\", ctx_r0.inputType)(\"disabled\", ctx_r0.disabled);\n    ɵngcc0.ɵɵattribute(\"autocapitalize\", ctx_r0.autocapitalize);\n  }\n}\nconst CodeInputComponentConfigToken = new InjectionToken('CodeInputComponentConfig');\nconst defaultComponentConfig = {\n  codeLength: 4,\n  inputType: 'tel',\n  initialFocusField: undefined,\n  isCharsCode: false,\n  isCodeHidden: false,\n  isPrevFocusableAfterClearing: true,\n  isFocusingOnLastByClickIfFilled: false,\n  code: undefined,\n  disabled: false,\n  autocapitalize: undefined\n};\nvar InputState;\n(function (InputState) {\n  InputState[InputState[\"ready\"] = 0] = \"ready\";\n  InputState[InputState[\"reset\"] = 1] = \"reset\";\n})(InputState || (InputState = {}));\nclass CodeInputComponent {\n  constructor(config) {\n    /** @deprecated Use isCharsCode prop instead. */\n    this.isNonDigitsCode = false;\n    this.codeChanged = new EventEmitter();\n    this.codeCompleted = new EventEmitter();\n    this.placeholders = [];\n    this.inputs = [];\n    this.inputsStates = [];\n    this.state = {\n      isFocusingAfterAppearingCompleted: false,\n      isInitialFocusFieldEnabled: false\n    };\n    Object.assign(this, defaultComponentConfig);\n    if (!config) {\n      return;\n    }\n    // filtering for only valid config props\n    for (const prop in config) {\n      if (!config.hasOwnProperty(prop)) {\n        continue;\n      }\n      if (!defaultComponentConfig.hasOwnProperty(prop)) {\n        continue;\n      }\n      // @ts-ignore\n      this[prop] = config[prop];\n    }\n  }\n  /**\r\n   * Life cycle\r\n   */\n  ngOnInit() {\n    // defining the state\n    this.state.isInitialFocusFieldEnabled = !this.isEmpty(this.initialFocusField);\n    // initiating the code\n    this.onCodeLengthChanges();\n  }\n  ngAfterViewInit() {\n    // initiation of the inputs\n    this.inputsListSubscription = this.inputsList.changes.subscribe(this.onInputsListChanges.bind(this));\n    this.onInputsListChanges(this.inputsList);\n  }\n  ngAfterViewChecked() {\n    this.focusOnInputAfterAppearing();\n  }\n  ngOnChanges(changes) {\n    if (changes.code) {\n      this.onInputCodeChanges();\n    }\n    if (changes.codeLength) {\n      this.onCodeLengthChanges();\n    }\n  }\n  ngOnDestroy() {\n    if (this.inputsListSubscription) {\n      this.inputsListSubscription.unsubscribe();\n    }\n  }\n  /**\r\n   * Methods\r\n   */\n  reset(isChangesEmitting = false) {\n    // resetting the code to its initial value or to an empty value\n    this.onInputCodeChanges();\n    if (this.state.isInitialFocusFieldEnabled) {\n      // tslint:disable-next-line:no-non-null-assertion\n      this.focusOnField(this.initialFocusField);\n    }\n    if (isChangesEmitting) {\n      this.emitChanges();\n    }\n  }\n  focusOnField(index) {\n    if (index >= this._codeLength) {\n      throw new Error('The index of the focusing input box should be less than the codeLength.');\n    }\n    this.inputs[index].focus();\n  }\n  onClick(e) {\n    // handle click events only if the the prop is enabled\n    if (!this.isFocusingOnLastByClickIfFilled) {\n      return;\n    }\n    const target = e.target;\n    const last = this.inputs[this._codeLength - 1];\n    // already focused\n    if (target === last) {\n      return;\n    }\n    // check filling\n    const isFilled = this.getCurrentFilledCode().length >= this._codeLength;\n    if (!isFilled) {\n      return;\n    }\n    // focusing on the last input if is filled\n    setTimeout(() => last.focus());\n  }\n  onInput(e, i) {\n    const target = e.target;\n    const value = e.data || target.value;\n    if (this.isEmpty(value)) {\n      return;\n    }\n    // only digits are allowed if isCharsCode flag is absent/false\n    if (!this.canInputValue(value)) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.setInputValue(target, null);\n      this.setStateForInput(target, InputState.reset);\n      return;\n    }\n    const values = value.toString().trim().split('');\n    for (let j = 0; j < values.length; j++) {\n      const index = j + i;\n      if (index > this._codeLength - 1) {\n        break;\n      }\n      this.setInputValue(this.inputs[index], values[j]);\n    }\n    this.emitChanges();\n    const next = i + values.length;\n    if (next > this._codeLength - 1) {\n      target.blur();\n      return;\n    }\n    this.inputs[next].focus();\n  }\n  onPaste(e, i) {\n    e.preventDefault();\n    e.stopPropagation();\n    const data = e.clipboardData ? e.clipboardData.getData('text').trim() : undefined;\n    if (this.isEmpty(data)) {\n      return;\n    }\n    // Convert paste text into iterable\n    // tslint:disable-next-line:no-non-null-assertion\n    const values = data.split('');\n    let valIndex = 0;\n    for (let j = i; j < this.inputs.length; j++) {\n      // The values end is reached. Loop exit\n      if (valIndex === values.length) {\n        break;\n      }\n      const input = this.inputs[j];\n      const val = values[valIndex];\n      // Cancel the loop when a value cannot be used\n      if (!this.canInputValue(val)) {\n        this.setInputValue(input, null);\n        this.setStateForInput(input, InputState.reset);\n        return;\n      }\n      this.setInputValue(input, val.toString());\n      valIndex++;\n    }\n    this.inputs[i].blur();\n    this.emitChanges();\n  }\n  onKeydown(e, i) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const target = e.target;\n      const isTargetEmpty = this.isEmpty(target.value);\n      const prev = i - 1;\n      // processing only the backspace and delete key events\n      const isBackspaceKey = yield this.isBackspaceKey(e);\n      const isDeleteKey = this.isDeleteKey(e);\n      if (!isBackspaceKey && !isDeleteKey) {\n        return;\n      }\n      e.preventDefault();\n      this.setInputValue(target, null);\n      if (!isTargetEmpty) {\n        this.emitChanges();\n      }\n      // preventing to focusing on the previous field if it does not exist or the delete key has been pressed\n      if (prev < 0 || isDeleteKey) {\n        return;\n      }\n      if (isTargetEmpty || this.isPrevFocusableAfterClearing) {\n        this.inputs[prev].focus();\n      }\n    });\n  }\n  onInputCodeChanges() {\n    if (!this.inputs.length) {\n      return;\n    }\n    if (this.isEmpty(this.code)) {\n      this.inputs.forEach(input => {\n        this.setInputValue(input, null);\n      });\n      return;\n    }\n    // tslint:disable-next-line:no-non-null-assertion\n    const chars = this.code.toString().trim().split('');\n    // checking if all the values are correct\n    let isAllCharsAreAllowed = true;\n    for (const char of chars) {\n      if (!this.canInputValue(char)) {\n        isAllCharsAreAllowed = false;\n        break;\n      }\n    }\n    this.inputs.forEach((input, index) => {\n      const value = isAllCharsAreAllowed ? chars[index] : null;\n      this.setInputValue(input, value);\n    });\n  }\n  onCodeLengthChanges() {\n    if (!this.codeLength) {\n      return;\n    }\n    this._codeLength = this.codeLength;\n    if (this._codeLength > this.placeholders.length) {\n      const numbers = Array(this._codeLength - this.placeholders.length).fill(1);\n      this.placeholders.splice(this.placeholders.length - 1, 0, ...numbers);\n    } else if (this._codeLength < this.placeholders.length) {\n      this.placeholders.splice(this._codeLength);\n    }\n  }\n  onInputsListChanges(list) {\n    if (list.length > this.inputs.length) {\n      const inputsToAdd = list.filter((item, index) => index > this.inputs.length - 1);\n      this.inputs.splice(this.inputs.length, 0, ...inputsToAdd.map(item => item.nativeElement));\n      const states = Array(inputsToAdd.length).fill(InputState.ready);\n      this.inputsStates.splice(this.inputsStates.length, 0, ...states);\n    } else if (list.length < this.inputs.length) {\n      this.inputs.splice(list.length);\n      this.inputsStates.splice(list.length);\n    }\n    // filling the inputs after changing of their count\n    this.onInputCodeChanges();\n  }\n  focusOnInputAfterAppearing() {\n    if (!this.state.isInitialFocusFieldEnabled) {\n      return;\n    }\n    if (this.state.isFocusingAfterAppearingCompleted) {\n      return;\n    }\n    // tslint:disable-next-line:no-non-null-assertion\n    this.focusOnField(this.initialFocusField);\n    // tslint:disable-next-line:no-non-null-assertion\n    this.state.isFocusingAfterAppearingCompleted = document.activeElement === this.inputs[this.initialFocusField];\n  }\n  emitChanges() {\n    setTimeout(() => this.emitCode(), 50);\n  }\n  emitCode() {\n    const code = this.getCurrentFilledCode();\n    this.codeChanged.emit(code);\n    if (code.length >= this._codeLength) {\n      this.codeCompleted.emit(code);\n    }\n  }\n  getCurrentFilledCode() {\n    let code = '';\n    for (const input of this.inputs) {\n      if (!this.isEmpty(input.value)) {\n        code += input.value;\n      }\n    }\n    return code;\n  }\n  isBackspaceKey(e) {\n    const isBackspace = e.key && e.key.toLowerCase() === 'backspace' || e.keyCode && e.keyCode === 8;\n    if (isBackspace) {\n      return Promise.resolve(true);\n    }\n    // process only key with placeholder keycode on android devices\n    if (!e.keyCode || e.keyCode !== 229) {\n      return Promise.resolve(false);\n    }\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const input = e.target;\n        const isReset = this.getStateForInput(input) === InputState.reset;\n        if (isReset) {\n          this.setStateForInput(input, InputState.ready);\n        }\n        // if backspace key pressed the caret will have position 0 (for single value field)\n        resolve(input.selectionStart === 0 && !isReset);\n      });\n    });\n  }\n  isDeleteKey(e) {\n    return e.key && e.key.toLowerCase() === 'delete' || e.keyCode && e.keyCode === 46;\n  }\n  setInputValue(input, value) {\n    const isEmpty = this.isEmpty(value);\n    const valueClassCSS = 'has-value';\n    const emptyClassCSS = 'empty';\n    if (isEmpty) {\n      input.value = '';\n      input.classList.remove(valueClassCSS);\n      // tslint:disable-next-line:no-non-null-assertion\n      input.parentElement.classList.add(emptyClassCSS);\n    } else {\n      input.value = value;\n      input.classList.add(valueClassCSS);\n      // tslint:disable-next-line:no-non-null-assertion\n      input.parentElement.classList.remove(emptyClassCSS);\n    }\n  }\n  canInputValue(value) {\n    if (this.isEmpty(value)) {\n      return false;\n    }\n    const isDigitsValue = /^[0-9]+$/.test(value.toString());\n    return isDigitsValue || this.isCharsCode || this.isNonDigitsCode;\n  }\n  setStateForInput(input, state) {\n    const index = this.inputs.indexOf(input);\n    if (index < 0) {\n      return;\n    }\n    this.inputsStates[index] = state;\n  }\n  getStateForInput(input) {\n    const index = this.inputs.indexOf(input);\n    return this.inputsStates[index];\n  }\n  isEmpty(value) {\n    return value === null || value === undefined || !value.toString().length;\n  }\n}\nCodeInputComponent.ɵfac = function CodeInputComponent_Factory(t) {\n  return new (t || CodeInputComponent)(ɵngcc0.ɵɵdirectiveInject(CodeInputComponentConfigToken, 8));\n};\nCodeInputComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: CodeInputComponent,\n  selectors: [[\"code-input\"]],\n  viewQuery: function CodeInputComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputsList = _t);\n    }\n  },\n  inputs: {\n    isNonDigitsCode: \"isNonDigitsCode\",\n    codeLength: \"codeLength\",\n    inputType: \"inputType\",\n    initialFocusField: \"initialFocusField\",\n    isCharsCode: \"isCharsCode\",\n    isCodeHidden: \"isCodeHidden\",\n    isPrevFocusableAfterClearing: \"isPrevFocusableAfterClearing\",\n    isFocusingOnLastByClickIfFilled: \"isFocusingOnLastByClickIfFilled\",\n    code: \"code\",\n    disabled: \"disabled\",\n    autocapitalize: \"autocapitalize\"\n  },\n  outputs: {\n    codeChanged: \"codeChanged\",\n    codeCompleted: \"codeCompleted\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 1,\n  vars: 1,\n  consts: [[3, \"code-hidden\", 4, \"ngFor\", \"ngForOf\"], [\"autocomplete\", \"one-time-code\", 3, \"type\", \"disabled\", \"click\", \"paste\", \"input\", \"keydown\"], [\"input\", \"\"]],\n  template: function CodeInputComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, CodeInputComponent_span_0_Template, 3, 5, \"span\", 0);\n    }\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.placeholders);\n    }\n  },\n  dependencies: [ɵngcc1.NgForOf],\n  styles: [\"[_nghost-%COMP%]{--text-security-type:disc;--item-spacing:4px;--item-height:4.375em;--item-border:1px solid #ddd;--item-border-bottom:1px solid #ddd;--item-border-has-value:1px solid #ddd;--item-border-bottom-has-value:1px solid #ddd;--item-border-focused:1px solid #ddd;--item-border-bottom-focused:1px solid #ddd;--item-shadow-focused:0px 1px 5px #ddd;--item-border-radius:5px;--item-background:transparent;--color:#171516;display:flex;transform:translateZ(0);font-size:inherit;color:var(--color)}[_nghost-%COMP%]   span[_ngcontent-%COMP%]{display:block;flex:1;padding-right:var(--item-spacing)}[_nghost-%COMP%]   span[_ngcontent-%COMP%]:first-child{padding-left:var(--item-spacing)}[_nghost-%COMP%]   span.code-hidden[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{text-security:var(--text-security-type);-webkit-text-security:var(--text-security-type);-moz-text-security:var(--text-security-type)}[_nghost-%COMP%]   input[_ngcontent-%COMP%]{width:100%;height:var(--item-height);color:inherit;background:var(--item-background);text-align:center;font-size:inherit;border:var(--item-border);border-bottom:var(--item-border-bottom);border-radius:var(--item-border-radius);-webkit-appearance:none;transform:translateZ(0);-webkit-transform:translateZ(0);outline:none}[_nghost-%COMP%]   input.has-value[_ngcontent-%COMP%]{border:var(--item-border-has-value);border-bottom:var(--item-border-bottom-has-value)}[_nghost-%COMP%]   input[_ngcontent-%COMP%]:focus{border:var(--item-border-focused);border-bottom:var(--item-border-bottom-focused);box-shadow:var(--item-shadow-focused)}\"]\n});\n/**\r\n * @type {function(): !Array<(null|{\r\n *   type: ?,\r\n *   decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>),\r\n * })>}\r\n * @nocollapse\r\n */\nCodeInputComponent.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [CodeInputComponentConfigToken]\n  }]\n}];\n/** @type {!Object<string, !Array<{type: !Function, args: (undefined|!Array<?>)}>>} */\nCodeInputComponent.propDecorators = {\n  inputsList: [{\n    type: ViewChildren,\n    args: ['input']\n  }],\n  codeLength: [{\n    type: Input\n  }],\n  inputType: [{\n    type: Input\n  }],\n  initialFocusField: [{\n    type: Input\n  }],\n  isNonDigitsCode: [{\n    type: Input\n  }],\n  isCharsCode: [{\n    type: Input\n  }],\n  isCodeHidden: [{\n    type: Input\n  }],\n  isPrevFocusableAfterClearing: [{\n    type: Input\n  }],\n  isFocusingOnLastByClickIfFilled: [{\n    type: Input\n  }],\n  code: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  autocapitalize: [{\n    type: Input\n  }],\n  codeChanged: [{\n    type: Output\n  }],\n  codeCompleted: [{\n    type: Output\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CodeInputComponent, [{\n    type: Component,\n    args: [{\n      selector: 'code-input',\n      template: \"<span *ngFor=\\\"let holder of placeholders; index as i\\\"\\n      [class.code-hidden]=\\\"isCodeHidden\\\">\\n  <input #input\\n         (click)=\\\"onClick($event)\\\"\\n         (paste)=\\\"onPaste($event, i)\\\"\\n         (input)=\\\"onInput($event, i)\\\"\\n         (keydown)=\\\"onKeydown($event, i)\\\"\\n         [type]=\\\"inputType\\\"\\n         [disabled]=\\\"disabled\\\"\\n         [attr.autocapitalize]=\\\"autocapitalize\\\"\\n         autocomplete=\\\"one-time-code\\\"/>\\n</span>\\n\",\n      styles: [\":host{--text-security-type:disc;--item-spacing:4px;--item-height:4.375em;--item-border:1px solid #ddd;--item-border-bottom:1px solid #ddd;--item-border-has-value:1px solid #ddd;--item-border-bottom-has-value:1px solid #ddd;--item-border-focused:1px solid #ddd;--item-border-bottom-focused:1px solid #ddd;--item-shadow-focused:0px 1px 5px #ddd;--item-border-radius:5px;--item-background:transparent;--color:#171516;display:flex;transform:translateZ(0);font-size:inherit;color:var(--color)}:host span{display:block;flex:1;padding-right:var(--item-spacing)}:host span:first-child{padding-left:var(--item-spacing)}:host span.code-hidden input{text-security:var(--text-security-type);-webkit-text-security:var(--text-security-type);-moz-text-security:var(--text-security-type)}:host input{width:100%;height:var(--item-height);color:inherit;background:var(--item-background);text-align:center;font-size:inherit;border:var(--item-border);border-bottom:var(--item-border-bottom);border-radius:var(--item-border-radius);-webkit-appearance:none;transform:translateZ(0);-webkit-transform:translateZ(0);outline:none}:host input.has-value{border:var(--item-border-has-value);border-bottom:var(--item-border-bottom-has-value)}:host input:focus{border:var(--item-border-focused);border-bottom:var(--item-border-bottom-focused);box-shadow:var(--item-shadow-focused)}\"]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CodeInputComponentConfigToken]\n      }]\n    }];\n  }, {\n    isNonDigitsCode: [{\n      type: Input\n    }],\n    codeChanged: [{\n      type: Output\n    }],\n    codeCompleted: [{\n      type: Output\n    }],\n    inputsList: [{\n      type: ViewChildren,\n      args: ['input']\n    }],\n    codeLength: [{\n      type: Input\n    }],\n    inputType: [{\n      type: Input\n    }],\n    initialFocusField: [{\n      type: Input\n    }],\n    isCharsCode: [{\n      type: Input\n    }],\n    isCodeHidden: [{\n      type: Input\n    }],\n    isPrevFocusableAfterClearing: [{\n      type: Input\n    }],\n    isFocusingOnLastByClickIfFilled: [{\n      type: Input\n    }],\n    code: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    autocapitalize: [{\n      type: Input\n    }]\n  });\n})();\nclass CodeInputModule {\n  static forRoot(config) {\n    return {\n      ngModule: CodeInputModule,\n      providers: [{\n        provide: CodeInputComponentConfigToken,\n        useValue: config\n      }]\n    };\n  }\n}\nCodeInputModule.ɵfac = function CodeInputModule_Factory(t) {\n  return new (t || CodeInputModule)();\n};\nCodeInputModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: CodeInputModule\n});\nCodeInputModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [CommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CodeInputModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [CodeInputComponent],\n      exports: [CodeInputComponent]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CodeInputModule, {\n    declarations: function () {\n      return [CodeInputComponent];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [CodeInputComponent];\n    }\n  });\n})();\n\n/*\r\n * Public API Surface of code-input\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { CodeInputComponent, CodeInputModule, CodeInputComponentConfigToken as ɵa };","map":{"version":3,"names":["__awaiter","InjectionToken","EventEmitter","Component","Optional","Inject","ViewChildren","Input","Output","NgModule","CommonModule","ɵngcc0","ɵngcc1","_c0","CodeInputComponent_span_0_Template","rf","ctx","_r5","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","CodeInputComponent_span_0_Template_input_click_1_listener","$event","ɵɵrestoreView","ctx_r4","ɵɵnextContext","ɵɵresetView","onClick","CodeInputComponent_span_0_Template_input_paste_1_listener","restoredCtx","i_r2","index","ctx_r6","onPaste","CodeInputComponent_span_0_Template_input_input_1_listener","ctx_r7","onInput","CodeInputComponent_span_0_Template_input_keydown_1_listener","ctx_r8","onKeydown","ɵɵelementEnd","ctx_r0","ɵɵclassProp","isCodeHidden","ɵɵadvance","ɵɵproperty","inputType","disabled","ɵɵattribute","autocapitalize","CodeInputComponentConfigToken","defaultComponentConfig","codeLength","initialFocusField","undefined","isCharsCode","isPrevFocusableAfterClearing","isFocusingOnLastByClickIfFilled","code","InputState","CodeInputComponent","constructor","config","isNonDigitsCode","codeChanged","codeCompleted","placeholders","inputs","inputsStates","state","isFocusingAfterAppearingCompleted","isInitialFocusFieldEnabled","Object","assign","prop","hasOwnProperty","ngOnInit","isEmpty","onCodeLengthChanges","ngAfterViewInit","inputsListSubscription","inputsList","changes","subscribe","onInputsListChanges","bind","ngAfterViewChecked","focusOnInputAfterAppearing","ngOnChanges","onInputCodeChanges","ngOnDestroy","unsubscribe","reset","isChangesEmitting","focusOnField","emitChanges","_codeLength","Error","focus","e","target","last","isFilled","getCurrentFilledCode","length","setTimeout","i","value","data","canInputValue","preventDefault","stopPropagation","setInputValue","setStateForInput","values","toString","trim","split","j","next","blur","clipboardData","getData","valIndex","input","val","isTargetEmpty","prev","isBackspaceKey","isDeleteKey","forEach","chars","isAllCharsAreAllowed","char","numbers","Array","fill","splice","list","inputsToAdd","filter","item","map","nativeElement","states","ready","document","activeElement","emitCode","emit","isBackspace","key","toLowerCase","keyCode","Promise","resolve","isReset","getStateForInput","selectionStart","valueClassCSS","emptyClassCSS","classList","remove","parentElement","add","isDigitsValue","test","indexOf","ɵfac","CodeInputComponent_Factory","t","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","type","selectors","viewQuery","CodeInputComponent_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","outputs","features","ɵɵNgOnChangesFeature","decls","vars","consts","template","CodeInputComponent_Template","ɵɵtemplate","dependencies","NgForOf","styles","ctorParameters","decorators","args","propDecorators","ngDevMode","ɵsetClassMetadata","selector","CodeInputModule","forRoot","ngModule","providers","provide","useValue","CodeInputModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports","ngJitMode","ɵɵsetNgModuleScope","ɵa"],"sources":["C:/Users/yaasm/IdeaProjects/CloudUP_FrontTestYassmine/node_modules/angular-code-input/__ivy_ngcc__/fesm2015/angular-code-input.js"],"sourcesContent":["import { __awaiter } from 'tslib';\nimport { InjectionToken, EventEmitter, Component, Optional, Inject, ViewChildren, Input, Output, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nconst _c0 = [\"input\"];\nfunction CodeInputComponent_span_0_Template(rf, ctx) { if (rf & 1) {\n    const _r5 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"span\")(1, \"input\", 1, 2);\n    ɵngcc0.ɵɵlistener(\"click\", function CodeInputComponent_span_0_Template_input_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r4.onClick($event)); })(\"paste\", function CodeInputComponent_span_0_Template_input_paste_1_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r5); const i_r2 = restoredCtx.index; const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r6.onPaste($event, i_r2)); })(\"input\", function CodeInputComponent_span_0_Template_input_input_1_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r5); const i_r2 = restoredCtx.index; const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r7.onInput($event, i_r2)); })(\"keydown\", function CodeInputComponent_span_0_Template_input_keydown_1_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r5); const i_r2 = restoredCtx.index; const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r8.onKeydown($event, i_r2)); });\n    ɵngcc0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"code-hidden\", ctx_r0.isCodeHidden);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"type\", ctx_r0.inputType)(\"disabled\", ctx_r0.disabled);\n    ɵngcc0.ɵɵattribute(\"autocapitalize\", ctx_r0.autocapitalize);\n} }\nconst CodeInputComponentConfigToken = new InjectionToken('CodeInputComponentConfig');\r\nconst defaultComponentConfig = {\r\n    codeLength: 4,\r\n    inputType: 'tel',\r\n    initialFocusField: undefined,\r\n    isCharsCode: false,\r\n    isCodeHidden: false,\r\n    isPrevFocusableAfterClearing: true,\r\n    isFocusingOnLastByClickIfFilled: false,\r\n    code: undefined,\r\n    disabled: false,\r\n    autocapitalize: undefined\r\n};\n\nvar InputState;\r\n(function (InputState) {\r\n    InputState[InputState[\"ready\"] = 0] = \"ready\";\r\n    InputState[InputState[\"reset\"] = 1] = \"reset\";\r\n})(InputState || (InputState = {}));\r\nclass CodeInputComponent {\r\n    constructor(config) {\r\n        /** @deprecated Use isCharsCode prop instead. */\r\n        this.isNonDigitsCode = false;\r\n        this.codeChanged = new EventEmitter();\r\n        this.codeCompleted = new EventEmitter();\r\n        this.placeholders = [];\r\n        this.inputs = [];\r\n        this.inputsStates = [];\r\n        this.state = {\r\n            isFocusingAfterAppearingCompleted: false,\r\n            isInitialFocusFieldEnabled: false\r\n        };\r\n        Object.assign(this, defaultComponentConfig);\r\n        if (!config) {\r\n            return;\r\n        }\r\n        // filtering for only valid config props\r\n        for (const prop in config) {\r\n            if (!config.hasOwnProperty(prop)) {\r\n                continue;\r\n            }\r\n            if (!defaultComponentConfig.hasOwnProperty(prop)) {\r\n                continue;\r\n            }\r\n            // @ts-ignore\r\n            this[prop] = config[prop];\r\n        }\r\n    }\r\n    /**\r\n     * Life cycle\r\n     */\r\n    ngOnInit() {\r\n        // defining the state\r\n        this.state.isInitialFocusFieldEnabled = !this.isEmpty(this.initialFocusField);\r\n        // initiating the code\r\n        this.onCodeLengthChanges();\r\n    }\r\n    ngAfterViewInit() {\r\n        // initiation of the inputs\r\n        this.inputsListSubscription = this.inputsList.changes.subscribe(this.onInputsListChanges.bind(this));\r\n        this.onInputsListChanges(this.inputsList);\r\n    }\r\n    ngAfterViewChecked() {\r\n        this.focusOnInputAfterAppearing();\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (changes.code) {\r\n            this.onInputCodeChanges();\r\n        }\r\n        if (changes.codeLength) {\r\n            this.onCodeLengthChanges();\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        if (this.inputsListSubscription) {\r\n            this.inputsListSubscription.unsubscribe();\r\n        }\r\n    }\r\n    /**\r\n     * Methods\r\n     */\r\n    reset(isChangesEmitting = false) {\r\n        // resetting the code to its initial value or to an empty value\r\n        this.onInputCodeChanges();\r\n        if (this.state.isInitialFocusFieldEnabled) {\r\n            // tslint:disable-next-line:no-non-null-assertion\r\n            this.focusOnField(this.initialFocusField);\r\n        }\r\n        if (isChangesEmitting) {\r\n            this.emitChanges();\r\n        }\r\n    }\r\n    focusOnField(index) {\r\n        if (index >= this._codeLength) {\r\n            throw new Error('The index of the focusing input box should be less than the codeLength.');\r\n        }\r\n        this.inputs[index].focus();\r\n    }\r\n    onClick(e) {\r\n        // handle click events only if the the prop is enabled\r\n        if (!this.isFocusingOnLastByClickIfFilled) {\r\n            return;\r\n        }\r\n        const target = e.target;\r\n        const last = this.inputs[this._codeLength - 1];\r\n        // already focused\r\n        if (target === last) {\r\n            return;\r\n        }\r\n        // check filling\r\n        const isFilled = this.getCurrentFilledCode().length >= this._codeLength;\r\n        if (!isFilled) {\r\n            return;\r\n        }\r\n        // focusing on the last input if is filled\r\n        setTimeout(() => last.focus());\r\n    }\r\n    onInput(e, i) {\r\n        const target = e.target;\r\n        const value = e.data || target.value;\r\n        if (this.isEmpty(value)) {\r\n            return;\r\n        }\r\n        // only digits are allowed if isCharsCode flag is absent/false\r\n        if (!this.canInputValue(value)) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            this.setInputValue(target, null);\r\n            this.setStateForInput(target, InputState.reset);\r\n            return;\r\n        }\r\n        const values = value.toString().trim().split('');\r\n        for (let j = 0; j < values.length; j++) {\r\n            const index = j + i;\r\n            if (index > this._codeLength - 1) {\r\n                break;\r\n            }\r\n            this.setInputValue(this.inputs[index], values[j]);\r\n        }\r\n        this.emitChanges();\r\n        const next = i + values.length;\r\n        if (next > this._codeLength - 1) {\r\n            target.blur();\r\n            return;\r\n        }\r\n        this.inputs[next].focus();\r\n    }\r\n    onPaste(e, i) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        const data = e.clipboardData ? e.clipboardData.getData('text').trim() : undefined;\r\n        if (this.isEmpty(data)) {\r\n            return;\r\n        }\r\n        // Convert paste text into iterable\r\n        // tslint:disable-next-line:no-non-null-assertion\r\n        const values = data.split('');\r\n        let valIndex = 0;\r\n        for (let j = i; j < this.inputs.length; j++) {\r\n            // The values end is reached. Loop exit\r\n            if (valIndex === values.length) {\r\n                break;\r\n            }\r\n            const input = this.inputs[j];\r\n            const val = values[valIndex];\r\n            // Cancel the loop when a value cannot be used\r\n            if (!this.canInputValue(val)) {\r\n                this.setInputValue(input, null);\r\n                this.setStateForInput(input, InputState.reset);\r\n                return;\r\n            }\r\n            this.setInputValue(input, val.toString());\r\n            valIndex++;\r\n        }\r\n        this.inputs[i].blur();\r\n        this.emitChanges();\r\n    }\r\n    onKeydown(e, i) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const target = e.target;\r\n            const isTargetEmpty = this.isEmpty(target.value);\r\n            const prev = i - 1;\r\n            // processing only the backspace and delete key events\r\n            const isBackspaceKey = yield this.isBackspaceKey(e);\r\n            const isDeleteKey = this.isDeleteKey(e);\r\n            if (!isBackspaceKey && !isDeleteKey) {\r\n                return;\r\n            }\r\n            e.preventDefault();\r\n            this.setInputValue(target, null);\r\n            if (!isTargetEmpty) {\r\n                this.emitChanges();\r\n            }\r\n            // preventing to focusing on the previous field if it does not exist or the delete key has been pressed\r\n            if (prev < 0 || isDeleteKey) {\r\n                return;\r\n            }\r\n            if (isTargetEmpty || this.isPrevFocusableAfterClearing) {\r\n                this.inputs[prev].focus();\r\n            }\r\n        });\r\n    }\r\n    onInputCodeChanges() {\r\n        if (!this.inputs.length) {\r\n            return;\r\n        }\r\n        if (this.isEmpty(this.code)) {\r\n            this.inputs.forEach((input) => {\r\n                this.setInputValue(input, null);\r\n            });\r\n            return;\r\n        }\r\n        // tslint:disable-next-line:no-non-null-assertion\r\n        const chars = this.code.toString().trim().split('');\r\n        // checking if all the values are correct\r\n        let isAllCharsAreAllowed = true;\r\n        for (const char of chars) {\r\n            if (!this.canInputValue(char)) {\r\n                isAllCharsAreAllowed = false;\r\n                break;\r\n            }\r\n        }\r\n        this.inputs.forEach((input, index) => {\r\n            const value = isAllCharsAreAllowed ? chars[index] : null;\r\n            this.setInputValue(input, value);\r\n        });\r\n    }\r\n    onCodeLengthChanges() {\r\n        if (!this.codeLength) {\r\n            return;\r\n        }\r\n        this._codeLength = this.codeLength;\r\n        if (this._codeLength > this.placeholders.length) {\r\n            const numbers = Array(this._codeLength - this.placeholders.length).fill(1);\r\n            this.placeholders.splice(this.placeholders.length - 1, 0, ...numbers);\r\n        }\r\n        else if (this._codeLength < this.placeholders.length) {\r\n            this.placeholders.splice(this._codeLength);\r\n        }\r\n    }\r\n    onInputsListChanges(list) {\r\n        if (list.length > this.inputs.length) {\r\n            const inputsToAdd = list.filter((item, index) => index > this.inputs.length - 1);\r\n            this.inputs.splice(this.inputs.length, 0, ...inputsToAdd.map(item => item.nativeElement));\r\n            const states = Array(inputsToAdd.length).fill(InputState.ready);\r\n            this.inputsStates.splice(this.inputsStates.length, 0, ...states);\r\n        }\r\n        else if (list.length < this.inputs.length) {\r\n            this.inputs.splice(list.length);\r\n            this.inputsStates.splice(list.length);\r\n        }\r\n        // filling the inputs after changing of their count\r\n        this.onInputCodeChanges();\r\n    }\r\n    focusOnInputAfterAppearing() {\r\n        if (!this.state.isInitialFocusFieldEnabled) {\r\n            return;\r\n        }\r\n        if (this.state.isFocusingAfterAppearingCompleted) {\r\n            return;\r\n        }\r\n        // tslint:disable-next-line:no-non-null-assertion\r\n        this.focusOnField(this.initialFocusField);\r\n        // tslint:disable-next-line:no-non-null-assertion\r\n        this.state.isFocusingAfterAppearingCompleted = document.activeElement === this.inputs[this.initialFocusField];\r\n    }\r\n    emitChanges() {\r\n        setTimeout(() => this.emitCode(), 50);\r\n    }\r\n    emitCode() {\r\n        const code = this.getCurrentFilledCode();\r\n        this.codeChanged.emit(code);\r\n        if (code.length >= this._codeLength) {\r\n            this.codeCompleted.emit(code);\r\n        }\r\n    }\r\n    getCurrentFilledCode() {\r\n        let code = '';\r\n        for (const input of this.inputs) {\r\n            if (!this.isEmpty(input.value)) {\r\n                code += input.value;\r\n            }\r\n        }\r\n        return code;\r\n    }\r\n    isBackspaceKey(e) {\r\n        const isBackspace = (e.key && e.key.toLowerCase() === 'backspace') || (e.keyCode && e.keyCode === 8);\r\n        if (isBackspace) {\r\n            return Promise.resolve(true);\r\n        }\r\n        // process only key with placeholder keycode on android devices\r\n        if (!e.keyCode || e.keyCode !== 229) {\r\n            return Promise.resolve(false);\r\n        }\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                const input = e.target;\r\n                const isReset = this.getStateForInput(input) === InputState.reset;\r\n                if (isReset) {\r\n                    this.setStateForInput(input, InputState.ready);\r\n                }\r\n                // if backspace key pressed the caret will have position 0 (for single value field)\r\n                resolve(input.selectionStart === 0 && !isReset);\r\n            });\r\n        });\r\n    }\r\n    isDeleteKey(e) {\r\n        return (e.key && e.key.toLowerCase() === 'delete') || (e.keyCode && e.keyCode === 46);\r\n    }\r\n    setInputValue(input, value) {\r\n        const isEmpty = this.isEmpty(value);\r\n        const valueClassCSS = 'has-value';\r\n        const emptyClassCSS = 'empty';\r\n        if (isEmpty) {\r\n            input.value = '';\r\n            input.classList.remove(valueClassCSS);\r\n            // tslint:disable-next-line:no-non-null-assertion\r\n            input.parentElement.classList.add(emptyClassCSS);\r\n        }\r\n        else {\r\n            input.value = value;\r\n            input.classList.add(valueClassCSS);\r\n            // tslint:disable-next-line:no-non-null-assertion\r\n            input.parentElement.classList.remove(emptyClassCSS);\r\n        }\r\n    }\r\n    canInputValue(value) {\r\n        if (this.isEmpty(value)) {\r\n            return false;\r\n        }\r\n        const isDigitsValue = /^[0-9]+$/.test(value.toString());\r\n        return isDigitsValue || (this.isCharsCode || this.isNonDigitsCode);\r\n    }\r\n    setStateForInput(input, state) {\r\n        const index = this.inputs.indexOf(input);\r\n        if (index < 0) {\r\n            return;\r\n        }\r\n        this.inputsStates[index] = state;\r\n    }\r\n    getStateForInput(input) {\r\n        const index = this.inputs.indexOf(input);\r\n        return this.inputsStates[index];\r\n    }\r\n    isEmpty(value) {\r\n        return value === null || value === undefined || !value.toString().length;\r\n    }\r\n}\nCodeInputComponent.ɵfac = function CodeInputComponent_Factory(t) { return new (t || CodeInputComponent)(ɵngcc0.ɵɵdirectiveInject(CodeInputComponentConfigToken, 8)); };\nCodeInputComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CodeInputComponent, selectors: [[\"code-input\"]], viewQuery: function CodeInputComponent_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputsList = _t);\n    } }, inputs: { isNonDigitsCode: \"isNonDigitsCode\", codeLength: \"codeLength\", inputType: \"inputType\", initialFocusField: \"initialFocusField\", isCharsCode: \"isCharsCode\", isCodeHidden: \"isCodeHidden\", isPrevFocusableAfterClearing: \"isPrevFocusableAfterClearing\", isFocusingOnLastByClickIfFilled: \"isFocusingOnLastByClickIfFilled\", code: \"code\", disabled: \"disabled\", autocapitalize: \"autocapitalize\" }, outputs: { codeChanged: \"codeChanged\", codeCompleted: \"codeCompleted\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [[3, \"code-hidden\", 4, \"ngFor\", \"ngForOf\"], [\"autocomplete\", \"one-time-code\", 3, \"type\", \"disabled\", \"click\", \"paste\", \"input\", \"keydown\"], [\"input\", \"\"]], template: function CodeInputComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, CodeInputComponent_span_0_Template, 3, 5, \"span\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.placeholders);\n    } }, dependencies: [ɵngcc1.NgForOf], styles: [\"[_nghost-%COMP%]{--text-security-type:disc;--item-spacing:4px;--item-height:4.375em;--item-border:1px solid #ddd;--item-border-bottom:1px solid #ddd;--item-border-has-value:1px solid #ddd;--item-border-bottom-has-value:1px solid #ddd;--item-border-focused:1px solid #ddd;--item-border-bottom-focused:1px solid #ddd;--item-shadow-focused:0px 1px 5px #ddd;--item-border-radius:5px;--item-background:transparent;--color:#171516;display:flex;transform:translateZ(0);font-size:inherit;color:var(--color)}[_nghost-%COMP%]   span[_ngcontent-%COMP%]{display:block;flex:1;padding-right:var(--item-spacing)}[_nghost-%COMP%]   span[_ngcontent-%COMP%]:first-child{padding-left:var(--item-spacing)}[_nghost-%COMP%]   span.code-hidden[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{text-security:var(--text-security-type);-webkit-text-security:var(--text-security-type);-moz-text-security:var(--text-security-type)}[_nghost-%COMP%]   input[_ngcontent-%COMP%]{width:100%;height:var(--item-height);color:inherit;background:var(--item-background);text-align:center;font-size:inherit;border:var(--item-border);border-bottom:var(--item-border-bottom);border-radius:var(--item-border-radius);-webkit-appearance:none;transform:translateZ(0);-webkit-transform:translateZ(0);outline:none}[_nghost-%COMP%]   input.has-value[_ngcontent-%COMP%]{border:var(--item-border-has-value);border-bottom:var(--item-border-bottom-has-value)}[_nghost-%COMP%]   input[_ngcontent-%COMP%]:focus{border:var(--item-border-focused);border-bottom:var(--item-border-bottom-focused);box-shadow:var(--item-shadow-focused)}\"] });\r\n/**\r\n * @type {function(): !Array<(null|{\r\n *   type: ?,\r\n *   decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>),\r\n * })>}\r\n * @nocollapse\r\n */\r\nCodeInputComponent.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CodeInputComponentConfigToken,] }] }\r\n];\r\n/** @type {!Object<string, !Array<{type: !Function, args: (undefined|!Array<?>)}>>} */\r\nCodeInputComponent.propDecorators = {\r\n    inputsList: [{ type: ViewChildren, args: ['input',] }],\r\n    codeLength: [{ type: Input }],\r\n    inputType: [{ type: Input }],\r\n    initialFocusField: [{ type: Input }],\r\n    isNonDigitsCode: [{ type: Input }],\r\n    isCharsCode: [{ type: Input }],\r\n    isCodeHidden: [{ type: Input }],\r\n    isPrevFocusableAfterClearing: [{ type: Input }],\r\n    isFocusingOnLastByClickIfFilled: [{ type: Input }],\r\n    code: [{ type: Input }],\r\n    disabled: [{ type: Input }],\r\n    autocapitalize: [{ type: Input }],\r\n    codeChanged: [{ type: Output }],\r\n    codeCompleted: [{ type: Output }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CodeInputComponent, [{\n        type: Component,\n        args: [{ selector: 'code-input', template: \"<span *ngFor=\\\"let holder of placeholders; index as i\\\"\\n      [class.code-hidden]=\\\"isCodeHidden\\\">\\n  <input #input\\n         (click)=\\\"onClick($event)\\\"\\n         (paste)=\\\"onPaste($event, i)\\\"\\n         (input)=\\\"onInput($event, i)\\\"\\n         (keydown)=\\\"onKeydown($event, i)\\\"\\n         [type]=\\\"inputType\\\"\\n         [disabled]=\\\"disabled\\\"\\n         [attr.autocapitalize]=\\\"autocapitalize\\\"\\n         autocomplete=\\\"one-time-code\\\"/>\\n</span>\\n\", styles: [\":host{--text-security-type:disc;--item-spacing:4px;--item-height:4.375em;--item-border:1px solid #ddd;--item-border-bottom:1px solid #ddd;--item-border-has-value:1px solid #ddd;--item-border-bottom-has-value:1px solid #ddd;--item-border-focused:1px solid #ddd;--item-border-bottom-focused:1px solid #ddd;--item-shadow-focused:0px 1px 5px #ddd;--item-border-radius:5px;--item-background:transparent;--color:#171516;display:flex;transform:translateZ(0);font-size:inherit;color:var(--color)}:host span{display:block;flex:1;padding-right:var(--item-spacing)}:host span:first-child{padding-left:var(--item-spacing)}:host span.code-hidden input{text-security:var(--text-security-type);-webkit-text-security:var(--text-security-type);-moz-text-security:var(--text-security-type)}:host input{width:100%;height:var(--item-height);color:inherit;background:var(--item-background);text-align:center;font-size:inherit;border:var(--item-border);border-bottom:var(--item-border-bottom);border-radius:var(--item-border-radius);-webkit-appearance:none;transform:translateZ(0);-webkit-transform:translateZ(0);outline:none}:host input.has-value{border:var(--item-border-has-value);border-bottom:var(--item-border-bottom-has-value)}:host input:focus{border:var(--item-border-focused);border-bottom:var(--item-border-bottom-focused);box-shadow:var(--item-shadow-focused)}\"] }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CodeInputComponentConfigToken]\n            }] }]; }, { isNonDigitsCode: [{\n            type: Input\n        }], codeChanged: [{\n            type: Output\n        }], codeCompleted: [{\n            type: Output\n        }], inputsList: [{\n            type: ViewChildren,\n            args: ['input']\n        }], codeLength: [{\n            type: Input\n        }], inputType: [{\n            type: Input\n        }], initialFocusField: [{\n            type: Input\n        }], isCharsCode: [{\n            type: Input\n        }], isCodeHidden: [{\n            type: Input\n        }], isPrevFocusableAfterClearing: [{\n            type: Input\n        }], isFocusingOnLastByClickIfFilled: [{\n            type: Input\n        }], code: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], autocapitalize: [{\n            type: Input\n        }] }); })();\n\nclass CodeInputModule {\r\n    static forRoot(config) {\r\n        return {\r\n            ngModule: CodeInputModule,\r\n            providers: [\r\n                { provide: CodeInputComponentConfigToken, useValue: config }\r\n            ]\r\n        };\r\n    }\r\n}\nCodeInputModule.ɵfac = function CodeInputModule_Factory(t) { return new (t || CodeInputModule)(); };\nCodeInputModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CodeInputModule });\nCodeInputModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [CommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CodeInputModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule\n                ],\n                declarations: [\n                    CodeInputComponent\n                ],\n                exports: [\n                    CodeInputComponent\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CodeInputModule, { declarations: function () { return [CodeInputComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [CodeInputComponent]; } }); })();\n\n/*\r\n * Public API Surface of code-input\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { CodeInputComponent, CodeInputModule, CodeInputComponentConfigToken as ɵa };\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}