{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../Services/time-slot.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction ScheduleTimingsComponent_li_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 32)(1, \"a\", 33);\n    i0.ɵɵlistener(\"click\", function ScheduleTimingsComponent_li_6_Template_a_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const day_r5 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.selectDay(day_r5));\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const day_r5 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"active\", ctx_r0.selectedDay === day_r5);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(day_r5);\n  }\n}\nfunction ScheduleTimingsComponent_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \"No time slots available\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ScheduleTimingsComponent_li_16_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 34)(1, \"span\", 35)(2, \"strong\");\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(5, \" to \");\n    i0.ɵɵelementStart(6, \"strong\");\n    i0.ɵɵtext(7);\n    i0.ɵɵpipe(8, \"date\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(9, \"a\", 36);\n    i0.ɵɵlistener(\"click\", function ScheduleTimingsComponent_li_16_Template_a_click_9_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const slot_r8 = restoredCtx.$implicit;\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.deleteSlot(slot_r8.id));\n    });\n    i0.ɵɵelement(10, \"i\", 37);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const slot_r8 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind3(4, 2, slot_r8.startTime, \"h:mm a\", \"GMT+0100\"));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind3(8, 6, slot_r8.endTime, \"h:mm a\", \"GMT+0100\"));\n  }\n}\nexport class ScheduleTimingsComponent {\n  constructor(timeSlotService) {\n    this.timeSlotService = timeSlotService;\n    this.days = ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY'];\n    this.professorId = 1;\n  }\n  // tslint:disable-next-line:typedef\n  saveNewSlot(formData) {\n    const startDateTime = this.formatDateTime(formData.date, formData.time);\n    const endDateTime = this.formatDateTime(formData.date, formData.endTime);\n    const date = new Date(formData.date);\n    const dayOfWeek = date.toLocaleString('en-US', {\n      weekday: 'long'\n    });\n    const professorId = 1;\n    const newTimeSlot = {\n      startTime: startDateTime,\n      endTime: endDateTime,\n      dayOfWeek: dayOfWeek.toUpperCase(),\n      professor: {\n        id: professorId\n      }\n    };\n    this.timeSlotService.addTimeSlot(professorId, newTimeSlot).subscribe(response => {\n      console.log('TimeSlot saved:', response);\n      alert('TimeSlot ajouté avec succès');\n      //this.fetchTimeSlotsForProfessor();\n      this.selectedDay = dayOfWeek;\n      this.selectDay(dayOfWeek);\n      this.timeSlotService.getTimeSlotsForDay(this.professorId, dayOfWeek);\n    }, error => {\n      console.error('Error saving time slot:', error);\n      alert('There was an error saving the time slot.');\n      // Handle the error appropriately\n    });\n  }\n\n  formatDateTime(date, time, hoursToAdd = 0) {\n    const timeParts = time.split(':');\n    const dateObj = new Date(date);\n    dateObj.setHours(parseInt(timeParts[0]) + hoursToAdd, parseInt(timeParts[1]));\n    // Convert to ISO string and remove seconds and milliseconds\n    return dateObj.toISOString().slice(0, 16) + ':00';\n  }\n  ngOnInit() {\n    // Other initialization logic\n  }\n  fetchTimeSlotsForProfessor() {\n    this.timeSlotService.getTimeSlots(this.professorId).subscribe(slots => {\n      this.timeSlots = slots;\n    }, error => {\n      console.error('Error fetching time slots for professor:', error);\n    });\n  }\n  selectDay(day) {\n    this.selectedDay = day;\n    // Fetch the time slots for the selected day from your service\n    this.timeSlotService.getTimeSlotsForDay(this.professorId, day).subscribe(slots => {\n      this.timeSlots = slots;\n    }, error => {\n      console.error('Error fetching time slots:', error);\n      this.timeSlots = [];\n    });\n  }\n  // tslint:disable-next-line:typedef\n  deleteSlot(slotId) {\n    if (confirm('Are you sure you want to delete this TimeSlot?')) {\n      this.timeSlotService.deleteTimeSlot(slotId).subscribe(() => {\n        this.timeSlots = this.timeSlots.filter(slot => slot.id !== slotId);\n      }, error => {\n        console.error('Failed to delete time slot', error);\n      });\n    }\n  }\n}\nScheduleTimingsComponent.ɵfac = function ScheduleTimingsComponent_Factory(t) {\n  return new (t || ScheduleTimingsComponent)(i0.ɵɵdirectiveInject(i1.TimeSlotService));\n};\nScheduleTimingsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ScheduleTimingsComponent,\n  selectors: [[\"app-schedule-timings\"]],\n  decls: 43,\n  vars: 3,\n  consts: [[1, \"row\"], [1, \"col-md-12\"], [1, \"card\", \"schedule-widget\", \"mb-0\"], [1, \"schedule-header\"], [1, \"schedule-nav\"], [1, \"nav\", \"nav-tabs\", \"nav-justified\"], [\"class\", \"nav-item\", 4, \"ngFor\", \"ngForOf\"], [\"noSlotsAvailable\", \"\"], [1, \"container\"], [1, \"card\", \"booking-schedule\", \"schedule-widget\"], [1, \"schedule-cont\"], [1, \"time-slot\"], [1, \"clearfix\"], [\"class\", \"slot-item\", 4, \"ngFor\", \"ngForOf\"], [\"role\", \"document\", 1, \"modal-dialog\"], [1, \"modal-content\"], [1, \"modal-header\"], [\"id\", \"addTimeSlotModalLabel\", 1, \"modal-title\"], [\"type\", \"button\", \"data-dismiss\", \"modal\", \"aria-label\", \"Close\", 1, \"close\"], [\"aria-hidden\", \"true\"], [1, \"modal-body\"], [3, \"ngSubmit\"], [\"slotForm\", \"ngForm\"], [1, \"form-group\"], [\"for\", \"date\"], [\"type\", \"date\", \"id\", \"date\", \"name\", \"date\", \"ngModel\", \"\", \"required\", \"\", 1, \"form-control\"], [\"for\", \"time\"], [\"type\", \"time\", \"id\", \"time\", \"name\", \"time\", \"ngModel\", \"\", \"required\", \"\", 1, \"form-control\"], [\"for\", \"endTime\"], [\"type\", \"time\", \"id\", \"endTime\", \"name\", \"endTime\", \"ngModel\", \"\", \"required\", \"\", 1, \"form-control\"], [1, \"modal-footer\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [1, \"nav-item\"], [1, \"nav-link\", 3, \"click\"], [1, \"slot-item\"], [1, \"slot-time\"], [\"href\", \"javascript:void(0)\", 1, \"delete_schedule\", 3, \"click\"], [1, \"fa\", \"fa-times\"]],\n  template: function ScheduleTimingsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r11 = i0.ɵɵgetCurrentView();\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"ul\", 5);\n      i0.ɵɵtemplate(6, ScheduleTimingsComponent_li_6_Template, 3, 3, \"li\", 6);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵtemplate(7, ScheduleTimingsComponent_ng_template_7_Template, 2, 0, \"ng-template\", null, 7, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(9, \"div\", 8)(10, \"div\", 9)(11, \"div\", 10)(12, \"div\", 0)(13, \"div\", 1)(14, \"div\", 11)(15, \"ul\", 12);\n      i0.ɵɵtemplate(16, ScheduleTimingsComponent_li_16_Template, 11, 10, \"li\", 13);\n      i0.ɵɵelementEnd()()()()()()();\n      i0.ɵɵelementStart(17, \"div\", 14)(18, \"div\", 15)(19, \"div\", 16)(20, \"h5\", 17);\n      i0.ɵɵtext(21, \"Add New Time Slot\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"button\", 18)(23, \"span\", 19);\n      i0.ɵɵtext(24, \"\\u00D7\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(25, \"div\", 20)(26, \"form\", 21, 22);\n      i0.ɵɵlistener(\"ngSubmit\", function ScheduleTimingsComponent_Template_form_ngSubmit_26_listener() {\n        i0.ɵɵrestoreView(_r11);\n        const _r4 = i0.ɵɵreference(27);\n        return i0.ɵɵresetView(ctx.saveNewSlot(_r4.value));\n      });\n      i0.ɵɵelementStart(28, \"div\", 23)(29, \"label\", 24);\n      i0.ɵɵtext(30, \"Date\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(31, \"input\", 25);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(32, \"div\", 23)(33, \"label\", 26);\n      i0.ɵɵtext(34, \"Start Time\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(35, \"input\", 27);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(36, \"div\", 23)(37, \"label\", 28);\n      i0.ɵɵtext(38, \"End Time\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(39, \"input\", 29);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(40, \"div\", 30)(41, \"button\", 31);\n      i0.ɵɵtext(42, \"Save\");\n      i0.ɵɵelementEnd()()()()()();\n    }\n    if (rf & 2) {\n      const _r4 = i0.ɵɵreference(27);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngForOf\", ctx.days);\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"ngForOf\", ctx.timeSlots);\n      i0.ɵɵadvance(25);\n      i0.ɵɵproperty(\"disabled\", !_r4.valid);\n    }\n  },\n  dependencies: [i2.NgForOf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.NgModel, i3.NgForm, i2.DatePipe],\n  styles: [\"#daterange[_ngcontent-%COMP%] {\\r\\n  border: none;\\r\\n}\\r\\n\\r\\n\\r\\n.schedule-widget[_ngcontent-%COMP%]   .schedule-cont[_ngcontent-%COMP%]   .time-slot[_ngcontent-%COMP%] {\\r\\n  padding: 15px;\\r\\n  white-space: nowrap;\\r\\n  overflow-x: auto; \\r\\n}\\r\\n\\r\\n.schedule-widget[_ngcontent-%COMP%]   .schedule-cont[_ngcontent-%COMP%]   .time-slot[_ngcontent-%COMP%]   .availability[_ngcontent-%COMP%] {\\r\\n  display: inline-block; \\r\\n  background-color: #f8f9fa;\\r\\n  border-radius: 5px;\\r\\n  padding: 20px;\\r\\n  margin-right: 20px; \\r\\n  margin-bottom: 20px; \\r\\n}\\r\\n\\r\\n.schedule-widget[_ngcontent-%COMP%]   .schedule-header[_ngcontent-%COMP%]   .schedule-nav[_ngcontent-%COMP%]   .nav-link[_ngcontent-%COMP%] {\\r\\n  padding: 0.5rem 1rem; \\r\\n}\\r\\n\\r\\n.submit-section[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%] {\\r\\n  margin-top: 10px; \\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n.slot-item[_ngcontent-%COMP%] {\\r\\n  display: flexbox;\\r\\n  justify-content: space-between;\\r\\n  align-items: center;\\r\\n  padding: 10px; \\r\\n}\\r\\n\\r\\n.slot-time[_ngcontent-%COMP%] {\\r\\n  margin-right: 1px; \\r\\n}\\r\\n\\r\\n.delete_schedule[_ngcontent-%COMP%] {\\r\\n  padding: 2px; \\r\\n  margin-left: 1px; \\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYWxsLW1vZHVsZXMvaW5zdHJ1Y3RvcnMvc2NoZWR1bGUtdGltaW5ncy9zY2hlZHVsZS10aW1pbmdzLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxZQUFZO0FBQ2Q7OztBQUdBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQixnQkFBZ0IsRUFBRSx1REFBdUQ7QUFDM0U7O0FBRUE7RUFDRSxxQkFBcUIsRUFBRSw2Q0FBNkM7RUFDcEUseUJBQXlCO0VBQ3pCLGtCQUFrQjtFQUNsQixhQUFhO0VBQ2Isa0JBQWtCLEVBQUUsd0JBQXdCO0VBQzVDLG1CQUFtQixFQUFFLG9DQUFvQztBQUMzRDs7QUFFQTtFQUNFLG9CQUFvQixFQUFFLGlDQUFpQztBQUN6RDs7QUFFQTtFQUNFLGdCQUFnQixFQUFFLG1DQUFtQztBQUN2RDs7OztBQUlBO0VBQ0UsZ0JBQWdCO0VBQ2hCLDhCQUE4QjtFQUM5QixtQkFBbUI7RUFDbkIsYUFBYSxFQUFFLDZCQUE2QjtBQUM5Qzs7QUFFQTtFQUNFLGlCQUFpQixFQUFFLHNDQUFzQztBQUMzRDs7QUFFQTtFQUNFLFlBQVksRUFBRSwwREFBMEQ7RUFDeEUsZ0JBQWdCLEVBQUUsb0RBQW9EO0FBQ3hFIiwic291cmNlc0NvbnRlbnQiOlsiI2RhdGVyYW5nZSB7XHJcbiAgYm9yZGVyOiBub25lO1xyXG59XHJcblxyXG5cclxuLnNjaGVkdWxlLXdpZGdldCAuc2NoZWR1bGUtY29udCAudGltZS1zbG90IHtcclxuICBwYWRkaW5nOiAxNXB4O1xyXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcbiAgb3ZlcmZsb3cteDogYXV0bzsgLyogQWxsb3dzIGhvcml6b250YWwgc2Nyb2xsaW5nIGlmIGNvbnRlbnQgaXMgdG9vIHdpZGUgKi9cclxufVxyXG5cclxuLnNjaGVkdWxlLXdpZGdldCAuc2NoZWR1bGUtY29udCAudGltZS1zbG90IC5hdmFpbGFiaWxpdHkge1xyXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jazsgLyogQWxsb3dzIHRoZSBiYWNrZ3JvdW5kIHRvIGZpdCB0aGUgY29udGVudCAqL1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICNmOGY5ZmE7XHJcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gIHBhZGRpbmc6IDIwcHg7XHJcbiAgbWFyZ2luLXJpZ2h0OiAyMHB4OyAvKiBTcGFjZSBiZXR3ZWVuIGl0ZW1zICovXHJcbiAgbWFyZ2luLWJvdHRvbTogMjBweDsgLyogU3BhY2UgYmV0d2VlbiByb3dzIHdoZW4gd3JhcHBlZCAqL1xyXG59XHJcblxyXG4uc2NoZWR1bGUtd2lkZ2V0IC5zY2hlZHVsZS1oZWFkZXIgLnNjaGVkdWxlLW5hdiAubmF2LWxpbmsge1xyXG4gIHBhZGRpbmc6IDAuNXJlbSAxcmVtOyAvKiBDb21mb3J0YWJsZSBjbGljay90YXAgdGFyZ2V0ICovXHJcbn1cclxuXHJcbi5zdWJtaXQtc2VjdGlvbiAuYnRuIHtcclxuICBtYXJnaW4tdG9wOiAxMHB4OyAvKiBTcGFjaW5nIGZyb20gdGhlIGFib3ZlIGVsZW1lbnQgKi9cclxufVxyXG5cclxuXHJcblxyXG4uc2xvdC1pdGVtIHtcclxuICBkaXNwbGF5OiBmbGV4Ym94O1xyXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIHBhZGRpbmc6IDEwcHg7IC8qIEFkanVzdCBwYWRkaW5nIGFzIG5lZWRlZCAqL1xyXG59XHJcblxyXG4uc2xvdC10aW1lIHtcclxuICBtYXJnaW4tcmlnaHQ6IDFweDsgLyogQWRqdXN0IHRoZSByaWdodCBtYXJnaW4gYXMgbmVlZGVkICovXHJcbn1cclxuXHJcbi5kZWxldGVfc2NoZWR1bGUge1xyXG4gIHBhZGRpbmc6IDJweDsgLyogQWRkcyBzcGFjZSBhcm91bmQgdGhlIGRlbGV0ZSBpY29uIGZvciBlYXNpZXIgY2xpY2tpbmcgKi9cclxuICBtYXJnaW4tbGVmdDogMXB4OyAvKiBBZGRzIHNwYWNlIGJldHdlZW4gdGhlIHRpbWUgYW5kIHRoZSBkZWxldGUgaWNvbiAqL1xyXG59XHJcblxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","ScheduleTimingsComponent","constructor","timeSlotService","saveNewSlot","formData","startDateTime","formatDateTime","date","time","endDateTime","endTime","Date","dayOfWeek","toLocaleString","weekday","professorId","newTimeSlot","startTime","toUpperCase","professor","id","addTimeSlot","subscribe","response","console","log","alert","selectedDay","selectDay","getTimeSlotsForDay","error","hoursToAdd","timeParts","split","dateObj","setHours","parseInt","toISOString","slice","ngOnInit","fetchTimeSlotsForProfessor","getTimeSlots","slots","timeSlots","day","deleteSlot","slotId","confirm","deleteTimeSlot","filter","slot","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\Sami\\Desktop\\CloudUP_Front\\src\\app\\all-modules\\instructors\\schedule-timings\\schedule-timings.component.html","C:\\Users\\Sami\\Desktop\\CloudUP_Front\\src\\app\\all-modules\\instructors\\schedule-timings\\schedule-timings.component.ts"],"sourcesContent":["<div class=\"row\">\r\n  <div class=\"col-md-12\">\r\n    <div class=\"card schedule-widget mb-0\">\r\n      <div class=\"schedule-header\">\r\n        <!-- Schedule Nav -->\r\n        <div class=\"schedule-nav\">\r\n          <ul class=\"nav nav-tabs nav-justified\">\r\n            <li class=\"nav-item\" *ngFor=\"let day of days\">\r\n              <a class=\"nav-link\" [class.active]=\"selectedDay === day\" (click)=\"selectDay(day)\">{{ day }}</a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <ng-template #noSlotsAvailable>\r\n        <p>No time slots available</p>\r\n      </ng-template>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div class=\"container\">\r\n  <div class=\"card booking-schedule schedule-widget\">\r\n    <div class=\"schedule-cont\">\r\n      <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n          <div class=\"time-slot\">\r\n            <ul class=\"clearfix\">\r\n\r\n              <li *ngFor=\"let slot of timeSlots\" class=\"slot-item\">\r\n                  <span class=\"slot-time\">\r\n                    <strong>{{ slot.startTime | date: 'h:mm a':'GMT+0100' }}</strong> to\r\n                    <strong>{{ slot.endTime | date: 'h:mm a':'GMT+0100' }}</strong>\r\n                  </span>\r\n                <a href=\"javascript:void(0)\" class=\"delete_schedule\" (click)=\"deleteSlot(slot.id)\">\r\n                  <i class=\"fa fa-times\"></i>\r\n                </a>\r\n              </li>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div class=\"modal-dialog\" role=\"document\">\r\n  <div class=\"modal-content\">\r\n    <div class=\"modal-header\">\r\n      <h5 class=\"modal-title\" id=\"addTimeSlotModalLabel\">Add New Time Slot</h5>\r\n      <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n        <span aria-hidden=\"true\">&times;</span>\r\n      </button>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n      <form #slotForm=\"ngForm\" (ngSubmit)=\"saveNewSlot(slotForm.value)\">\r\n        <div class=\"form-group\">\r\n          <label for=\"date\">Date</label>\r\n          <input type=\"date\" class=\"form-control\" id=\"date\" name=\"date\" ngModel required>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"time\">Start Time</label>\r\n          <input type=\"time\" class=\"form-control\" id=\"time\" name=\"time\" ngModel required>\r\n        </div>\r\n\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"endTime\">End Time</label>\r\n          <input type=\"time\" class=\"form-control\" id=\"endTime\" name=\"endTime\" ngModel required>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!slotForm.valid\">Save</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {Cours} from '../../../models/cours.model';\r\nimport {TimeSlotService} from '../../../Services/time-slot.service';\r\n\r\n@Component({\r\n  selector: 'app-schedule-timings',\r\n  templateUrl: './schedule-timings.component.html',\r\n  styleUrls: ['./schedule-timings.component.css']\r\n})\r\nexport class ScheduleTimingsComponent implements OnInit {\r\n  days = ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY'];\r\n  selectedDay!: string;\r\n  timeSlots!: any[];\r\n  professorId = 1;\r\n\r\n\r\n\r\n\r\n  constructor(private timeSlotService: TimeSlotService) {}\r\n\r\n\r\n  // tslint:disable-next-line:typedef\r\n\r\n  saveNewSlot(formData: any) {\r\n    const startDateTime = this.formatDateTime(formData.date, formData.time);\r\n    const endDateTime = this.formatDateTime(formData.date, formData.endTime);\r\n    const date = new Date(formData.date);\r\n    const dayOfWeek = date.toLocaleString('en-US', { weekday: 'long' });\r\n    const professorId = 1 ;\r\n\r\n    const newTimeSlot = {\r\n      startTime: startDateTime,\r\n      endTime: endDateTime,\r\n      dayOfWeek:  dayOfWeek.toUpperCase(),\r\n      professor: { id: professorId }\r\n    };\r\n\r\n    this.timeSlotService.addTimeSlot(professorId, newTimeSlot).subscribe(\r\n      response => {\r\n        console.log('TimeSlot saved:', response);\r\n        alert('TimeSlot ajouté avec succès');\r\n        //this.fetchTimeSlotsForProfessor();\r\n        this.selectedDay=dayOfWeek;\r\n        this.selectDay(dayOfWeek);\r\n        this.timeSlotService.getTimeSlotsForDay(this.professorId,dayOfWeek);\r\n      },\r\n      error => {\r\n        console.error('Error saving time slot:', error);\r\n        alert('There was an error saving the time slot.');\r\n\r\n        // Handle the error appropriately\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n\r\n  formatDateTime(date: string, time: string, hoursToAdd = 0): string {\r\n    const timeParts = time.split(':');\r\n    const dateObj = new Date(date);\r\n    dateObj.setHours(parseInt(timeParts[0]) + hoursToAdd, parseInt(timeParts[1]));\r\n\r\n    // Convert to ISO string and remove seconds and milliseconds\r\n    return dateObj.toISOString().slice(0, 16) + ':00';\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n    // Other initialization logic\r\n  }\r\n\r\n  fetchTimeSlotsForProfessor(): void {\r\n    this.timeSlotService.getTimeSlots(this.professorId).subscribe(\r\n      (slots) => {\r\n        this.timeSlots = slots;\r\n      },\r\n      (error) => {\r\n        console.error('Error fetching time slots for professor:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  selectDay(day: string): void {\r\n    this.selectedDay = day;\r\n    // Fetch the time slots for the selected day from your service\r\n    this.timeSlotService.getTimeSlotsForDay(this.professorId, day).subscribe(\r\n      slots => {\r\n        this.timeSlots = slots;\r\n      },\r\n      error => {\r\n        console.error('Error fetching time slots:', error);\r\n        this.timeSlots = [];\r\n      }\r\n    );\r\n  }\r\n\r\n  // tslint:disable-next-line:typedef\r\n  deleteSlot(slotId: number) {\r\n    if (confirm('Are you sure you want to delete this TimeSlot?')) {\r\n\r\n      this.timeSlotService.deleteTimeSlot(slotId).subscribe(\r\n        () => {\r\n          this.timeSlots = this.timeSlots.filter(slot => slot.id !== slotId);\r\n        },\r\n        error => {\r\n          console.error('Failed to delete time slot', error);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}